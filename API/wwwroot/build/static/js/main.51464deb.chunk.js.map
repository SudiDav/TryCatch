{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/ProfileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","erros","hasOwnProperty","history","push","errors","modalStateErors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","delelePhoto","setDisplayName","activityStore","followingsCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modelStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","exact","as","NavLink","to","header","src","alt","style","marginRight","Button","basic","color","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBotton","secondary","clearing","floated","groupedActivities","groupName","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","primary","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","marginBottom","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","positive","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","ActivityDetailedSideBar","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileFollowings","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"+YAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAGT,aAA0C,IAA9BC,EAA6B,uDAAhB,EAAGC,EAAa,uDAAF,EAAE,yBAFzCD,gBAEyC,OADzCC,cACyC,EACrCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCPxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC7B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADGA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC5CD,KAGTP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MACE,WAAOD,GAAP,eAAAC,EAAA,iFAEQnB,EAAakB,EAASF,QAAT,YAFrB,uBAIIE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJlE,kBAKWkB,GALX,gCAOSA,GAPT,2CADF,uDAUE,SAACI,GAAuB,IAAD,EACYA,EAAMJ,SAA/BnB,EADa,EACbA,KAAMwB,EADO,EACPA,OAAQX,EADD,EACCA,OAEtB,OAAQW,GACN,KAAK,IAOH,GANmB,kBAATxB,GACRyB,IAAMF,MAAMvB,GAEO,QAAlBa,EAAOa,QAAoB1B,EAAK2B,MAAMC,eAAe,OACtDC,GAAQC,KAAK,cAEX9B,EAAK+B,OAAQ,CACf,IAAMC,EAAkB,GACxB,IAAK,IAAMC,KAAOjC,EAAK+B,OACjB/B,EAAK+B,OAAOE,IACdD,EAAgBF,KAAK9B,EAAK+B,OAAOE,IAGrC,MAAMD,EAAgBE,OAExB,MACF,KAAK,IACHT,IAAMF,MAAM,gBACZ,MACF,KAAK,IACHM,GAAQC,KAAK,aACb,MACF,KAAK,IACHf,EAAMC,YAAYmB,eAAenC,GACjC6B,GAAQC,KAAK,iBAKjB,OAAOM,QAAQC,OAAOd,MAI1B,IAAMe,EAAe,SAAKnB,GAAL,OAAoCA,EAASnB,MAE5DuC,EACC,SAAKC,GAAL,OAAqBlC,IAAMmC,IAAOD,GAAKE,KAAKJ,IAD7CC,EAEE,SAAKC,EAAaG,GAAlB,OACJrC,IAAMsC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAH5BC,EAIC,SAAKC,EAAaG,GAAlB,OACHrC,IAAMuC,IAAOL,EAAKG,GAAMD,KAAKJ,IAL3BC,EAMC,SAAKC,GAAL,OAAqBlC,IAAMwC,OAAUN,GAAKE,KAAKJ,IA6CvCS,EAND,CACZC,WArCiB,CACjBC,KAAM,SAACC,GAAD,OAA6B5C,IAAMmC,IAAiC,cAAe,CAACS,WACvFR,KAAKJ,IACRa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OACRf,EAAA,sBAAkCe,EAASF,IAAME,IACjDR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA8BxEK,QA3Bc,CACdC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAoBqB,KAyB5EE,SAtBe,CACfrB,IAAK,SAACsB,GAAD,OAAsBxB,EAAA,oBAAmCwB,KAC9DC,YAAa,SAACC,GACZ,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB3D,IAAMsC,KAAY,SAAUsB,EAAS,CAC1CjD,QAAS,CAAC,eAAgB,0BAG9BoD,aAAc,SAACjB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEkB,YAAa,SAAClB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDmB,cAAe,SAACC,GAAD,OAA+BjC,EAAA,YAAyBiC,IACvEC,gBAAiB,SAACV,GAAD,OAAsBxB,EAAA,kBAAyBwB,GAAY,KAC5EW,eAAgB,SAACX,EAAiBY,GAAlB,OACdpC,EAAA,kBAAmCwB,EAAnC,sBAAyDY,KAC3DC,eAAgB,SAACb,EAAkBY,GAAnB,OACdpC,EAAA,oBAA0CwB,EAA1C,iCAA2EY,OClGhEE,EACX,WAAYC,GAA2B,oBACrCC,OAAOC,OAAO9E,KAAK4E,IAIVG,EASX,WAAY3B,GAA+B,yBAR3CF,QAAe8B,EAQ2B,KAP1CC,MAAe,GAO2B,KAN1CC,SAAmB,GAMuB,KAL1CC,YAAsB,GAKoB,KAJ1CC,KAAoB,KAIsB,KAH1CC,KAAe,GAG2B,KAF1CC,MAAgB,GAGXlC,IACDpD,KAAKkD,GAAKE,EAASF,GACnBlD,KAAKiF,MAAQ7B,EAAS6B,MACtBjF,KAAKkF,SAAW9B,EAAS8B,SACzBlF,KAAKmF,YAAc/B,EAAS+B,YAC5BnF,KAAKoF,KAAOhC,EAASgC,KACrBpF,KAAKqF,KAAOjC,EAASiC,KACrBrF,KAAKsF,MAAQlC,EAASkC,Q,SC3BjBC,EACT,WAAY7B,GAAY,oBACpB1D,KAAK6D,SAAWH,EAAKG,SACrB7D,KAAKwF,YAAc9B,EAAK8B,YACxBxF,KAAKyF,MAAQ/B,EAAK+B,OCTLC,E,WAUnB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdjG,WAAgC,KAIlB,KAHdkG,aAAe,IAAIhG,EAGL,KAFdwE,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACjB,EAAKA,aAAeA,GAdR,KAiBdG,aAAe,SAAC3B,EAAmB4B,GACjC,IAAMC,EAAiB,WACrB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOtE,GACf,cAARA,GAAqB,EAAK0C,UAAU7B,OAAOb,OAGrD,OAAQ0C,GACN,IAAK,MACL6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACA,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU7B,OAAO,aACtB,EAAK6B,UAAUyB,IAAI,YAAaG,KAtC1B,KA2EdG,eA3Ec,sBA2EG,4BAAAtF,EAAA,6DACf,EAAK8E,gBAAiB,EADP,kBAGQnD,EAAMC,WAAWC,KAAK,EAAK0D,aAHnC,QAGPC,EAHO,QAKN5G,KAAKyG,SAAQ,SAACnD,GACnB,EAAKuD,YAAYvD,MAEnB,EAAKwD,cAAcF,EAAO3G,YAC1B,EAAK8G,mBAAkB,GATV,kDAWbC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAZV,0DA3EH,KA2FdD,cAAgB,SAAC7G,GACf,EAAKA,WAAaA,GA5FN,KA+FdiH,aA/Fc,uCA+FC,WAAO9D,GAAP,eAAAhC,EAAA,2DACTkC,EAAW,EAAK6D,YAAY/D,IADnB,uBAGX,EAAK2C,iBAAmBzC,EAHb,kBAIJA,GAJI,cAMX,EAAK4C,gBAAiB,EANX,mBAQQnD,EAAMC,WAAWG,QAAQC,GARjC,eAQTE,EARS,OAST,EAAKuD,YAAYvD,GACjB8D,aAAY,WACV,EAAKrB,iBAAmBzC,KAE1B,EAAKyD,mBAAkB,GAbd,kBAcFzD,GAdE,kCAgBT0D,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAjBd,0DA/FD,2DAqHNF,YAAc,SAACvD,GACrB,IACU,IADJM,EAAO7C,EAAMsG,UAAUzD,KACzBA,IACFN,EAASgE,QAAT,UAAmBhE,EAASiE,iBAA5B,aAAmB,EAAoBC,MACrC,SAACpG,GAAD,OAAOA,EAAE2C,WAAaH,EAAKG,YAE7BT,EAASmE,OAASnE,EAASoE,eAAiB9D,EAAKG,SACjDT,EAASqE,KAAT,UAAgBrE,EAASiE,iBAAzB,aAAgB,EAAoBK,MAClC,SAACC,GAAD,OAAOA,EAAE9D,WAAaT,EAASoE,iBAGnCpE,EAASgC,KAAO,IAAIwC,KAAKxE,EAASgC,MAClC,EAAKO,iBAAiBO,IAAI9C,EAASF,GAAIE,IAjI3B,KAoIN6D,YAAc,SAAC/D,GACrB,OAAO,EAAKyC,iBAAiBpD,IAAIW,IArIrB,KAwId2D,kBAAoB,SAACgB,GACnB,EAAK7B,eAAiB6B,GAzIV,KA4IdC,eA5Ic,uCA4IG,WAAO1E,GAAP,mBAAAlC,EAAA,6DACTwC,EAAO7C,EAAMsG,UAAUzD,KACvBqE,EAAW,IAAIxC,EAAQ7B,GAFd,kBAIPb,EAAMC,WAAWK,OAAOC,GAJjB,QAKP4E,EAAc,IAAIrD,EAASvB,IACrBoE,aAAe9D,EAAMG,SACjCmE,EAAYX,UAAY,CAACU,GACzB,EAAKpB,YAAYqB,GACjBd,aAAY,WACV,EAAKrB,iBAAmBmC,KAVb,kDAablB,QAAQC,IAAR,MAba,0DA5IH,2DA6JdkB,eA7Jc,uCA6JG,WAAO7E,GAAP,SAAAlC,EAAA,+EAEP2B,EAAMC,WAAWO,OAAOD,GAFjB,OAGb8D,aAAY,WACV,GAAI9D,EAASF,GAAI,CACf,IAAIgF,EAAe,2BACd,EAAKjB,YAAY7D,EAASF,KAC1BE,GAEL,EAAKuC,iBAAiBO,IAAI9C,EAASF,GAAIgF,GACvC,EAAKrC,iBAAmBqC,MAVf,gDAcbpB,QAAQC,IAAR,MACAG,aAAY,WACV,EAAKnB,SAAU,KAhBJ,yDA7JH,2DAkLdoC,eAlLc,uCAkLG,WAAOjF,GAAP,SAAAhC,EAAA,6DACf,EAAK6E,SAAU,EADA,kBAGPlD,EAAMC,WAAWF,OAAOM,GAHjB,OAIbgE,aAAY,WACV,EAAKvB,iBAAiB/C,OAAOM,GAC7B,EAAK6C,SAAU,KANJ,gDASbe,QAAQC,IAAR,MACAG,aAAY,WACV,EAAKnB,SAAU,KAXJ,yDAlLH,2DAkMdqC,iBAlMc,sBAkMK,4BAAAlH,EAAA,6DACXwC,EAAO7C,EAAMsG,UAAUzD,KAC7B,EAAKqC,SAAU,EAFE,kBAITlD,EAAMC,WAAWQ,OAAO,EAAKuC,iBAAkB3C,IAJtC,OAKfgE,aAAY,WAAO,IAAD,EAChB,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAClC,EAAKvB,iBAAiBwB,UAAtB,UACE,EAAKxB,iBAAiBwB,iBADxB,aACE,EAAiCgB,QAC/B,SAACnH,GAAD,OAAOA,EAAE2C,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aAEhC,EAAKgC,iBAAiBuB,SAAU,MAC3B,CAAC,IAAD,IACCW,EAAW,IAAIxC,EAAQ7B,GAC7B,YAAKmC,wBAAL,mBAAuBwB,iBAAvB,SAAkCzF,KAAKmG,GACvC,EAAKlC,iBAAkBuB,SAAU,EAGnC,EAAKzB,iBAAiBO,IACpB,EAAKL,iBAAkB3C,GACvB,EAAK2C,qBApBM,gDAwBfiB,QAAQC,IAAR,MAxBe,yBA0BfG,aAAY,kBAAO,EAAKnB,SAAU,KA1BnB,4EAlML,KAgOduC,qBAhOc,sBAgOS,sBAAApH,EAAA,6DACrB,EAAK6E,SAAU,EADM,kBAGblD,EAAMC,WAAWQ,OAAO,EAAKuC,iBAAkB3C,IAHlC,OAInBgE,aAAY,WAAO,IAAD,EAChB,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,iBAAiBO,IACpB,EAAKL,iBAAkB3C,GACvB,EAAK2C,qBARU,gDAYnBiB,QAAQC,IAAR,MAZmB,yBAcnBG,aAAY,kBAAO,EAAKnB,SAAU,KAdf,4EAhOT,KAkPdyC,sBAAwB,WACtB,EAAK3C,sBAAmBb,GAnPZ,KAsPdyD,wBAA0B,SAAC5E,GACzB,EAAK8B,iBAAiBY,SAAQ,SAAAnD,GAC5BA,EAASiE,UAAUd,SAAQ,SAAAwB,GACtBA,EAASlE,WAAaA,IACvBkE,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBA1PrCE,YAAmB5I,MAEnB6I,aACE,kBAAM,EAAKpE,UAAUqE,UACrB,WACE,EAAK7C,aAAe,IAAIhG,EACxB,EAAK0F,iBAAiBoD,QACtB,EAAKvC,oB,6CAkCX,WACE,IAAMxD,EAAS,IAAIgG,gBAUnB,OATAhG,EAAOkB,OAAO,aAAclE,KAAKiG,aAAa/F,WAAW+I,YACzDjG,EAAOkB,OAAO,WAAYlE,KAAKiG,aAAa9F,SAAS8I,YACrDjJ,KAAKyE,UAAU8B,SAAQ,SAACF,EAAOtE,GAClB,cAARA,EACCiB,EAAOkB,OAAOnC,EAAMsE,EAAe6C,eAErClG,EAAOkB,OAAOnC,EAAKsE,MAGhBrD,I,4BAGT,WACE,OAAOmG,MAAMC,KAAKpJ,KAAK2F,iBAAiB0D,UAAUC,MAChD,SAACpI,EAAGqI,GAAJ,OAAUrI,EAAEkE,KAAMoE,UAAYD,EAAEnE,KAAMoE,e,6BAI1C,WACE,OAAO3E,OAAO4E,QACZzJ,KAAK0J,iBAAiBC,QAAO,SAACC,EAAYxG,GAExC,IAAMgC,EAAOyE,kBAAOzG,EAASgC,KAAO,eAIpC,OAHAwE,EAAWxE,GAAQwE,EAAWxE,GAAX,sBACXwE,EAAWxE,IADA,CACOhC,IACtB,CAACA,GACEwG,IACN,S,cCpFYE,E,WAWjB,aAAc,IAAD,gCAVbxF,QAA0B,KAUb,KATbyF,gBAAiB,EASJ,KARbC,WAAY,EAQC,KAPbjE,SAAU,EAOG,KANbkE,WAAwB,GAMX,KALbC,mBAAoB,EAKP,KAJbC,UAAY,EAIC,KAHbC,eAAiC,GAGpB,KAFbC,mBAAoB,EAEP,KAiBbC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAlBR,KA4BbI,YA5Ba,uCA4BC,WAAO1G,GAAP,eAAA3C,EAAA,6DACV,EAAK6I,gBAAiB,EADZ,kBAGgBlH,EAAMe,SAASrB,IAAIsB,GAHnC,OAGAS,EAHA,OAIN4C,aAAY,WACR,EAAK5C,QAAUA,EACf,EAAKyF,gBAAiB,KANpB,gDASNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA5BD,2DA0CbjG,YA1Ca,uCA0CC,WAAOC,GAAP,iBAAA7C,EAAA,6DACV,EAAK8I,WAAY,EADP,kBAGiBnH,EAAMe,SAASE,YAAYC,GAH5C,OAGA9C,EAHA,OAIAuJ,EAAQvJ,EAASnB,KACvBoH,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,YAAKA,QAAQmG,cAAb,SAAqB7I,KAAK4I,GACvBA,EAAME,QAAU7J,EAAMsG,UAAUzD,OAC/B7C,EAAMsG,UAAUwD,SAASH,EAAMlI,KAC/B,EAAKgC,QAAQmB,MAAQ+E,EAAMlI,MAGnC,EAAK0H,WAAY,KAbf,gDAgBNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,WAAY,KAjB7B,yDA1CD,2DA8Db7F,aA9Da,uCA8DE,WAAOqG,GAAP,SAAAtJ,EAAA,6DACX,EAAK6E,SAAU,EADJ,kBAGDlD,EAAMe,SAASO,aAAaqG,EAAMtH,IAHjC,OAIPrC,EAAMsG,UAAUwD,SAASH,EAAMlI,KAC/B4E,aAAY,WACL,EAAK5C,SAAW,EAAKA,QAAQmG,SAC5B,EAAKnG,QAAQmG,OAAO/C,MAAK,SAAAkD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKpG,QAAQmG,OAAO/C,MAAK,SAAAkD,GAAC,OAAIA,EAAE1H,KAAOsH,EAAMtH,MAAKwH,QAAS,EAC3D,EAAKpG,QAAQmB,MAAQ+E,EAAMlI,IAC3B,EAAKyD,SAAU,MAVhB,gDAcPmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAfO,yDA9DF,2DAiFb8D,YAjFa,uCAiFC,WAAOL,GAAP,SAAAtJ,EAAA,6DACV,EAAK6E,SAAU,EADL,kBAGAlD,EAAMe,SAASQ,YAAYoG,EAAMtH,IAHjC,OAINgE,aAAY,WACS,IAAD,EAAb,EAAK5C,UACJ,EAAKA,QAAQmG,OAAb,UAAsB,EAAKnG,QAAQmG,cAAnC,aAAsB,EAAqBpC,QAAO,SAAAuC,GAAC,OAAIA,EAAE1H,KAAOsH,EAAMtH,MACtE,EAAK6C,SAAU,MAPjB,gDAWNmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAZM,yDAjFD,2DAiGb1C,cAjGa,uCAiGG,WAAMC,GAAN,SAAApD,EAAA,6DACZ,EAAK6E,SAAU,EADH,kBAGFlD,EAAMe,SAASS,cAAcC,GAH3B,OAIR4C,aAAY,WAAM,IAAD,EACT5C,EAAQkB,aAAelB,EAAQkB,eAAR,UAC3B3E,EAAMsG,UAAUzD,YADW,aAC3B,EAAsB8B,cACtB3E,EAAMsG,UAAU2D,eAAexG,EAAQkB,aAEvC,EAAKlB,QAAL,2BAAmB,EAAKA,SAAYA,GACpC,EAAKyB,SAAU,KAVX,gDAaRe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAdzB,yDAjGH,2DAmHbxB,gBAnHa,uCAmHK,WAAOV,EAAkB6E,GAAzB,SAAAxH,EAAA,6DACd,EAAK6E,SAAU,EADD,kBAGJlD,EAAMe,SAASW,gBAAgBV,GAH3B,OAIVhD,EAAMkK,cAActC,wBAAwB5E,GAC5CqD,aAAY,WAAO,IAAD,IACV,EAAK5C,SAAW,EAAKA,QAAQT,YAAb,UAA0BhD,EAAMsG,UAAUzD,YAA1C,aAA0B,EAAsBG,WACzD,EAAKS,QAAQT,WAAaA,IACjC6E,EAAY,EAAKpE,QAAQqE,iBAAmB,EAAKrE,QAAQqE,iBACzD,EAAKrE,QAAQoE,WAAa,EAAKpE,QAAQoE,WAExC,EAAKpE,SAAW,EAAKA,QAAQT,YAAb,UAA0BhD,EAAMsG,UAAUzD,YAA1C,aAA0B,EAAsBG,YAC/D6E,EAAY,EAAKpE,QAAQ0G,kBAAoB,EAAK1G,QAAQ0G,mBAE9D,EAAKf,WAAW1D,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQoE,UAAYpE,EAAQqE,iBAAmBrE,EAAQqE,iBACvDrE,EAAQoE,WAAapE,EAAQoE,cAIrC,EAAK3C,SAAU,KArBT,gDAwBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAzBvB,yDAnHL,6DAgJbkF,eAhJa,uCAgJI,WAAOxG,GAAP,eAAAvD,EAAA,6DACb,EAAKgJ,mBAAoB,EADZ,kBAGgBrH,EAAMe,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHwF,EAHG,OAIT/C,aAAY,WACR,EAAK+C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTpD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgD,mBAAoB,KAVlC,yDAhJJ,2DA8JbgB,mBA9Ja,uCA8JQ,WAAOrH,EAAkBY,GAAzB,eAAAvD,EAAA,6DACjB,EAAKmJ,mBAAoB,EADR,kBAGYxH,EAAMe,SAASc,eAAeb,EAAUY,GAHpD,OAGPmF,EAHO,OAIb1C,aAAY,WACR,EAAKkD,eAAiBR,EACtB,EAAKS,mBAAoB,KANhB,gDASbvD,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKmD,mBAAoB,KAXhB,yDA9JR,wDACTzB,YAAmB5I,MAEnB6I,aACI,kBAAM,EAAKsB,aACP,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM1F,EAA0B,IAAd0F,EAAkB,YAAc,YAClD,EAAKc,eAAexG,QAEpB,EAAKwF,WAAa,M,+CAYtC,WACI,GAAGpJ,EAAMsG,UAAUzD,MAAQ1D,KAAKsE,QAC5B,OAAOzD,EAAMsG,UAAUzD,KAAKG,WAAa7D,KAAKsE,QAAQT,a,KCjC7CsH,E,WAGjB,aAAc,IAAD,gCAFbzH,KAAoB,KAEP,KAQbD,MARa,uCAQL,WAAO2H,GAAP,eAAAlK,EAAA,+EAEmB2B,EAAMU,QAAQE,MAAM2H,GAFvC,OAEM1H,EAFN,OAGA7C,EAAMC,YAAYuK,SAAS3H,EAAK9C,OAChCsG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B/B,GAAQC,KAAK,eACbf,EAAMyK,WAAWC,aANjB,uHARK,2DAoBbC,OAAS,WACL3K,EAAMC,YAAYuK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,SAC/B,EAAKjI,KAAO,KACZ/B,GAAQC,KAAK,MAxBJ,KA2BbgK,QA3Ba,sBA2BH,4BAAA1K,EAAA,+EAEiB2B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFwD,aAAY,kBAAM,EAAKxD,KAAOA,KAH5B,gDAKFoD,QAAQC,IAAR,MALE,yDA3BG,KAmCbpD,SAnCa,uCAmCF,WAAOyH,GAAP,eAAAlK,EAAA,+EAEgB2B,EAAMU,QAAQI,SAASyH,GAFvC,OAEG1H,EAFH,OAGH7C,EAAMC,YAAYuK,SAAS3H,EAAK9C,OAChCsG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B/B,GAAQC,KAAK,eACbf,EAAMyK,WAAWC,aANd,uHAnCE,2DA+CbZ,SAAU,SAAClF,GACJ,EAAK/B,OAAM,EAAKA,KAAK+B,MAAQA,IAhDvB,KAkDbqF,eAAiB,SAACe,GACV,EAAKnI,OAAM,EAAKA,KAAK8B,YAAcqG,IAlDvCjD,YAAmB5I,M,4CAGvB,WACI,QAASA,KAAK0D,S,KCET7C,EAAe,CAC1BkK,cAAe,IAAIrF,EACnB5E,YAAa,ICXX,aAAc,IAAD,gCAJbO,MAA4B,KAIf,KAHbT,MAAuB6K,OAAOC,aAAaI,QAAQ,SAGtC,KAFbC,WAAY,EAEC,KAkBb9J,eAAiB,SAACZ,GACd,EAAKA,MAAQA,GAnBJ,KAsBbgK,SAAU,SAACzK,GACP,EAAKA,MAAQA,GAvBJ,KA0BboL,aAAc,WACV,EAAKD,WAAY,GA1BjBnD,YAAmB5I,MAKnB6I,aACG,kBAAM,EAAKjI,SACV,SAAAA,GACOA,EACC6K,OAAOC,aAAaO,QAAQ,QAASrL,GAErC6K,OAAOC,aAAaC,WAAW,aDAjDxE,UAAW,IAAIgE,EACfG,WAAY,IERV,aAAc,IAAD,gCALbY,MAAe,CACXC,MAAM,EACN1J,KAAM,MAGG,KAIb2J,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMzJ,KAAO4J,GANT,KASbd,WAAa,WACT,EAAKW,MAAMC,MAAO,EAClB,EAAKD,MAAMzJ,KAAO,MAVlBmG,YAAmB5I,OFQzBsM,aAAc,IAAIxC,EAClByC,aAAc,IGdZ,aAAc,IAAD,gCAHbC,SAA0B,GAGb,KAFbC,cAAsC,KAEzB,KAIbC,oBAAsB,SAACC,GAChB9L,EAAMkK,cAAclF,mBACnB,EAAK4G,eAAgB,IAAIG,KACxBC,QAAQtM,oBAAkDoM,EAAY,CACnEG,mBAAoB,kCAAMjM,EAAMsG,UAAUzD,YAAtB,aAAM,EAAsB9C,SAEnDmM,yBACAC,iBAAiBC,IAASC,aAC1BC,QAED,EAAKV,cAAcW,QAAQC,OAAM,SAAAhM,GAAK,OAAIyF,QAAQC,IAAI,kCAAmC1F,MAEzF,EAAKoL,cAAca,GAAG,gBAAgB,SAACd,GACnCtF,aAAY,WACRsF,EAASjG,SAAQ,SAAAgH,GACbA,EAAQC,UAAY,IAAI5F,KAAK2F,EAAQC,UAAY,QAErD,EAAKhB,SAAWA,QAIxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrCrG,aAAY,WACRqG,EAAQC,UAAY,IAAI5F,KAAK2F,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA5BzB,KAkCbG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAAhM,GAAK,OAAIyF,QAAQC,IAAI,8BAA+B1F,OAnC5E,KAsCbuM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAxCI,KA2CbG,WA3Ca,uCA2CA,WAAOxE,GAAP,iBAAAnI,EAAA,6DACTmI,EAAOsD,WAAP,UAAoB9L,EAAMkK,cAAclF,wBAAxC,aAAoB,EAAsC3C,GADjD,4BAIC,EAAKuJ,qBAJN,aAIC,EAAoBqB,OAAO,cAAezE,GAJ3C,sDAMLvC,QAAQC,IAAR,MANK,wDA3CA,sDACT6B,YAAmB5I,QHiBd+N,EAAeC,wBAAcnN,GAEnC,SAASoN,IACd,OAAOC,qBAAWH,G,WIzBLI,eAAS,WAAmB,IAAD,EAGpCF,IADF9G,UAAazD,EAFyB,EAEzBA,KAAM8H,EAFmB,EAEnBA,OAErB,OACE,cAAC4C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACE,eAACC,EAAA,EAAD,WACE,eAACH,EAAA,EAAKI,KAAN,CAAWC,OAAK,EAACC,GAAIC,IAASC,GAAG,IAAIC,QAAM,EAA3C,UACE,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,MAD/D,SAIA,cAACb,EAAA,EAAKI,KAAN,CAAWE,GAAIC,IAASC,GAAG,cAAc/C,KAAK,eAE9C,cAACuC,EAAA,EAAKI,KAAN,UACE,cAACU,EAAA,EAAD,CACER,GAAIC,IACJC,GAAG,kBACHO,OAAK,EACLd,UAAQ,EACRe,MAAM,QACN/C,QAAQ,sBAGZ,eAAC+B,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACE,cAACC,EAAA,EAAD,CACER,KAAS,OAAJpL,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,QAAS,mBACpB8J,QAAM,EACNC,OAAO,UAET,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAEjM,QAAF,IAAEA,OAAF,EAAEA,EAAM8B,YAA1C,SACE,eAACiK,EAAA,EAASrB,KAAV,WACE,cAACqB,EAAA,EAASjB,KAAV,CACEE,GAAIkB,IACJhB,GAAE,2BAAelL,QAAf,IAAeA,OAAf,EAAeA,EAAMG,UACvB8L,KAAK,aACLE,KAAK,SAEP,cAACJ,EAAA,EAASjB,KAAV,CAAesB,QAAStE,EAAQmE,KAAK,SAASE,KAAK,0B,8DCrClD1B,eAAS,WAA4B,IAAD,EAEEF,IAA5ClD,cAAgBtG,EAF0B,EAE1BA,UAAW2B,EAFe,EAEfA,aAElC,OACE,qCACE,eAACgI,EAAA,EAAD,CAAM2B,UAAQ,EAACC,KAAK,QAAQhB,MAAO,CAAEiB,MAAO,OAAQC,UAAW,IAA/D,UACE,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAAChB,MAAM,SAAS/C,QAAQ,YACtD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,gBACRgE,OAAQ5L,EAAU6L,IAAI,OACtBR,QAAS,kBAAM1J,EAAa,MAAO,WAEvC,cAACgI,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRgE,OAAQ5L,EAAU6L,IAAI,WACtBR,QAAS,kBAAM1J,EAAa,UAAW,WAE3C,cAACgI,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRgE,OAAQ5L,EAAU6L,IAAI,UACtBR,QAAS,kBAAM1J,EAAa,SAAU,cAG9C,cAAC+J,EAAA,EAAD,IACA,cAAC,IAAD,CACII,SAAU,SAACnL,GAAD,OAAUgB,EAAa,YAAahB,IAC9CiB,MAAO5B,EAAUlC,IAAI,cAAgB,IAAIqF,a,8ECtBlCuG,gBAAS,YAA2C,IAAD,EAAlB7J,EAAkB,EAAlBA,QAAkB,EAC5B2J,IAA5B3B,EADwD,EACxDA,aAAcnF,EAD0C,EAC1CA,UACd5C,EAA6B+H,EAA7B/H,gBAAiBwB,EAAYuG,EAAZvG,QAEzB,IAAI,UAAAoB,EAAUzD,YAAV,eAAgBG,YAAaS,EAAQT,SAAU,OAAO,KAS1D,OACE,eAAC2M,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACE,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC3B,MAAO,CAAEiB,MAAO,QAAxC,SACE,cAACf,EAAA,EAAD,CACE0B,OAAK,EACLxB,MAAM,OACN/C,QAAS/H,EAAQoE,UAAY,YAAc,oBAG/C,cAAC8H,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAC7B,MAAO,CAAEiB,MAAO,QAAvC,SACE,cAACf,EAAA,EAAD,CACEC,OAAK,EACLyB,OAAK,EACLxB,MAAO9K,EAAQoE,UAAY,MAAQ,QACnC2D,QAAS/H,EAAQoE,UAAY,WAAa,SAC1C3C,QAASA,EACT+J,QAAS,SAACgB,GAAD,OAvBjB,SAAsBA,EAAmBjN,GACvCiN,EAAEC,iBACFzM,EAAQoE,UACJnE,EAAgBV,GAAU,GAC1BU,EAAgBV,GAAU,GAmBRmN,CAAaF,EAAGxM,EAAQT,qBC5BnCsK,gBAAS,YAA0C,IAAnB7J,EAAkB,EAAlBA,QAO7C,OACE,eAAC2M,GAAA,EAAD,CAAMvC,GAAIkB,IAAMhB,GAAE,oBAAetK,EAAQT,UAAzC,UACE,cAACyL,EAAA,EAAD,CAAOR,IAAKxK,EAAQmB,OAAS,qBAC7B,eAACwL,GAAA,EAAKP,QAAN,WACE,cAACO,GAAA,EAAKd,OAAN,UAAc7L,EAAQkB,cACtB,cAACyL,GAAA,EAAKC,YAAN,UAXW,SAACC,GAChB,GAAIA,EACF,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EASnCG,CAAShN,EAAQiN,UAEtC,eAACN,GAAA,EAAKP,QAAN,CAAcc,OAAK,EAAnB,UACE,cAACC,GAAA,EAAD,CAAM5F,KAAK,SACVvH,EAAQqE,eAFX,gBAIA,cAAC,GAAD,CAAcrE,QAASA,UCnBd6J,gBAAS,YAEb,IADT9G,EACQ,EADRA,UAEMqK,EAAS,CACbC,YAAa,OACbC,YAAa,GAEf,OACE,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACGzK,EAAU0K,KAAI,SAAChK,GAAD,OACb,cAACiK,GAAA,EAAD,CACEC,WAAS,EAETC,QACE,cAACL,GAAA,EAAKrD,KAAN,CAEEE,GAAIkB,IACJhB,GAAE,oBAAe7G,EAASlE,UAH5B,SAIE,cAACyL,EAAA,EAAD,CACEU,KAAK,OACLmC,UAAQ,EACRrD,IAAK/G,EAAStC,OAAS,mBACvB2M,UAAQ,EACRpD,MAAOjH,EAASW,UAAYgJ,EAAS,QARlC3J,EAASlE,UALpB,SAiBE,cAACmO,GAAA,EAAMtB,QAAP,UACE,cAAC,GAAD,CAAapM,QAASyD,OAhBnBA,EAASlE,kBCZT,SAASwO,GAAT,GAAgD,IAAD,IAAnBjP,EAAmB,EAAnBA,SACzC,OACE,eAACkP,EAAA,EAAQC,MAAT,WACE,eAACD,EAAA,EAAD,WACGlP,EAASmF,aACR,cAACiK,GAAA,EAAD,CACEpC,SAAS,MACThB,MAAM,MACN/C,QAAQ,YACR2C,MAAO,CAAEyD,UAAW,YAGxB,cAACjE,GAAA,EAAK+D,MAAN,UACE,eAAC/D,GAAA,EAAD,WACE,cAACA,GAAA,EAAKc,MAAN,CACEN,MAAO,CAAE0D,aAAc,GACvB1C,KAAK,OACLmC,UAAQ,EACRrD,KAAK,UAAA1L,EAASqE,YAAT,eAAehC,QAAS,qBAE/B,eAAC+I,GAAA,EAAKkC,QAAN,WACE,cAAClC,GAAA,EAAK2B,OAAN,CAAazB,GAAIkB,IAAMhB,GAAE,sBAAiBxL,EAASF,IAAnD,SACGE,EAAS6B,QAEZ,eAACuJ,GAAA,EAAK0C,YAAN,uBACY,IACV,cAAC,IAAD,CAAMtC,GAAE,oBAAexL,EAASoE,cAAhC,mBACGpE,EAASqE,YADZ,aACG,EAAejC,iBAGnBpC,EAASmE,QACR,cAACiH,GAAA,EAAK0C,YAAN,UACE,cAACsB,GAAA,EAAD,CAAOrD,OAAK,EAACC,MAAM,SAAnB,6CAKHhM,EAASgE,UAAYhE,EAASmE,QAC7B,cAACiH,GAAA,EAAK0C,YAAN,UACE,cAACsB,GAAA,EAAD,CAAOrD,OAAK,EAACC,MAAM,QAAnB,yDASZ,cAACkD,EAAA,EAAD,UACE,iCACE,cAACb,GAAA,EAAD,CAAM5F,KAAK,UADb,IACyBhC,kBAAOzG,EAASgC,KAAO,uBAC9C,cAACqM,GAAA,EAAD,CAAM5F,KAAK,WAFb,IAE0BzI,EAASkC,WAGrC,cAACgN,EAAA,EAAD,CAASK,WAAS,EAAlB,SACE,cAAC,GAAD,CAA0BtL,UAAWjE,EAASiE,cAEhD,eAACiL,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACE,+BAAOxP,EAAS+B,cAChB,cAAC+J,EAAA,EAAD,CACER,GAAIkB,IACJhB,GAAE,sBAAiBxL,EAASF,IAC5BkM,MAAM,WACNyD,QAAQ,QACRxG,QAAQ,eCpEH8B,oBAAS,WAAyB,IAGvC2E,EAFkB7E,IAAlBlD,cAEA+H,kBACR,OACE,mCACGA,EAAkBf,KAAI,mCAAEgB,EAAF,KAAanJ,EAAb,YACrB,eAAC,WAAD,WACE,cAACuG,EAAA,EAAD,CAAQ6C,KAAG,EAAC5D,MAAM,SAAlB,SACG2D,IAGFnJ,EAAWmI,KAAI,SAAC3O,GAAD,OACd,cAACiP,GAAD,CAAoCjP,SAAUA,GAAvBA,EAASF,SANrB6P,W,UCVR,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAatC,OAAK,EAAC5B,MAAO,CAAEkB,UAAW,IAAvC,SACI,eAACoC,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAAStD,MAAO,CAAEmE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY/C,OAAb,CAAoB1K,OAAK,EAAzB,UACI,cAACyN,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,EAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,EAAA,EAAD,CAASK,WAAS,EAAC3D,MAAO,CAAEmE,UAAW,MACvC,cAACb,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAAC1D,EAAA,EAAD,CAAQoE,UAAQ,EAAClE,MAAM,OAAOyD,QAAQ,QAAQxG,QAAQ,kBCjB/D8B,oBAAS,WAA8B,IAC5CpD,EAAkBkD,IAAlBlD,cACApF,EAAkEoF,EAAlEpF,iBAAkBa,EAAgDuE,EAAhDvE,eAAgBL,EAAgC4E,EAAhC5E,gBAAiBpG,EAAegL,EAAfhL,WAFR,EAGbwT,oBAAS,GAHI,mBAG5CC,EAH4C,KAG/BC,EAH+B,KAkBnD,OAPAC,qBAAU,WACJ/N,EAAiBqK,MAAQ,GAAGxJ,MAC/B,CAACb,EAAiBqK,KAAMxJ,IAMzB,eAACmN,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACGlF,EAAc/E,iBAAmBwN,EAChC,qCACC,cAACP,GAAD,IACA,cAACA,GAAD,OAGD,cAAC,IAAD,CACIY,UAAW,EACXC,SAxBZ,WACEL,GAAe,GACftN,EAAgB,IAAIlG,EAAaF,EAAYgU,YAAc,IAC3DvN,IAAiBhE,MAAK,kBAAMiR,GAAe,OAsBjCO,SAAUR,KAAiBzT,GAAcA,EAAWgU,YAAchU,EAAWkU,WAC7EC,aAAa,EAJjB,SAME,cAAC,GAAD,QAaN,cAACP,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACE,cAAC,EAAD,MAEF,cAAC0D,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACE,cAACkE,EAAA,EAAD,CAAQ9D,OAAQmD,Y,4BCjDT,SAASY,GAAYC,GAAe,IAAD,EAC1BC,aAASD,EAAMxI,MADW,mBACzC0I,EADyC,KAClCC,EADkC,KAEhD,OACE,eAACC,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACE,gCAAQgT,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKnT,MACpB,cAACmR,GAAA,EAAD,CAAOrD,OAAK,EAACC,MAAM,MAAnB,SACGoF,EAAKnT,QAEN,QCdK8M,oBAAS,WAAsB,IACpChH,EAAc8G,IAAd9G,UACR,OACE,cAAC,KAAD,CACE0N,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAI1T,MAAO,MACjD2T,SAAU,SAAC3L,EAAD,OAAW4L,EAAX,EAAWA,UAAX,OACR9N,EAAU1D,MAAM4F,GAAQgE,OAAM,SAAChM,GAC7B4T,EAAU,CAAE5T,MAAO,kCAJzB,SAOG,gBAAG6T,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAActT,EAA/B,EAA+BA,OAA/B,OACC,eAAC,KAAD,CAAMuT,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACE,cAAClF,EAAA,EAAD,CACEzB,GAAG,KACHrC,QAAQ,wBACR+C,MAAM,OACNqD,UAAU,WAEZ,cAAC2B,GAAD,CAAavI,KAAK,QAAQyJ,YAAY,UACtC,cAAClB,GAAD,CAAavI,KAAK,WAAWyJ,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACE1J,KAAK,QACL2J,OAAQ,kBACN,cAAChD,GAAA,EAAD,CACExD,MAAO,CAAE0D,aAAc,IACvBvD,OAAK,EACLC,MAAM,MACN/C,QAASxK,EAAOR,WAItB,cAAC6N,EAAA,EAAD,CACEnJ,QAASoP,EACTM,SAAO,EACPpJ,QAAQ,QACRkJ,KAAK,SACL3E,OAAK,a,mBCrCF,SAAS8E,GAAT,GAA8C,IAAlB7T,EAAiB,EAAjBA,OACzC,OACE,cAAC8T,GAAA,EAAD,CAAStU,OAAK,EAAd,SACGQ,GACC,cAAC8T,GAAA,EAAQ9D,KAAT,UACGhQ,EAAOkQ,KAAI,SAAC6D,EAAUC,GAAX,OACV,cAACF,GAAA,EAAQnH,KAAT,UAAuBoH,GAAJ,UCJhBzH,oBAAS,WAAyB,IACvChH,EAAc8G,IAAd9G,UACR,OACE,cAAC,KAAD,CACE0N,cAAe,CACbrP,YAAa,GACb3B,SAAU,GACViR,MAAO,GACPC,SAAU,GACV1T,MAAO,MAET2T,SAAU,SAAC3L,EAAD,OAAW4L,EAAX,EAAWA,UAAX,OACR9N,EAAUxD,SAAS0F,GAAQgE,OAAM,SAAChM,GAChC4T,EAAU,CAAE5T,cAGhByU,iBAAkBC,KAAW,CAC3BvQ,YAAauQ,OAAaC,WAC1BnS,SAAUkS,OAAaC,WACvBlB,MAAOiB,OAAaC,WAAWlB,QAC/BC,SAAUgB,OAAaC,aAjB3B,SAmBG,gBAAGd,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAActT,EAA/B,EAA+BA,OAAQoU,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACC,eAAC,KAAD,CACEd,UAAU,gBACVJ,SAAUE,EACVG,aAAa,MAHf,UAIE,cAAClF,EAAA,EAAD,CACEzB,GAAG,KACHrC,QAAQ,0BACR+C,MAAM,OACNqD,UAAU,WAEZ,cAAC2B,GAAD,CAAavI,KAAK,cAAcyJ,YAAY,iBAC5C,cAAClB,GAAD,CAAavI,KAAK,WAAWyJ,YAAY,cACzC,cAAClB,GAAD,CAAavI,KAAK,QAAQyJ,YAAY,UACtC,cAAClB,GAAD,CAAavI,KAAK,WAAWyJ,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACE1J,KAAK,QACL2J,OAAQ,kBAAM,cAACE,GAAD,CAAkB7T,OAAQA,EAAOR,WAEjD,cAAC6N,EAAA,EAAD,CACEoE,UAAW2C,IAAYC,GAASf,EAChCpP,QAASoP,EACTM,SAAO,EACPpJ,QAAQ,WACRkJ,KAAK,SACL3E,OAAK,aC/CFzC,gBAAS,WAAqB,IAAD,EACRF,IAA1B9G,EADkC,EAClCA,UAAWmE,EADuB,EACvBA,WAEnB,OACE,cAACgH,EAAA,EAAD,CAASjE,UAAQ,EAACoE,UAAU,SAAS1C,UAAQ,EAACqF,UAAU,WAAxD,SACE,eAAC7G,EAAA,EAAD,CAAWoB,MAAI,EAAf,UACE,eAACQ,EAAA,EAAD,CAAQzB,GAAG,KAAKL,UAAQ,EAAxB,UACE,cAACiB,EAAA,EAAD,CACEU,KAAK,UACLlB,IAAI,mBACJC,IAAI,OACJC,MAAO,CAAEmH,aAAc,MAL3B,SASChP,EAAUiP,WACT,qCACE,cAACjG,EAAA,EAAD,CAAQzB,GAAG,KAAKL,UAAQ,EAAChC,QAAQ,iCACjC,cAAC8D,EAAA,EAAD,CAAQzB,GAAG,KAAKL,UAAQ,EAAChC,QAAO,2BAChC,cAAC6C,EAAA,EAAD,CAAQR,GAAIkB,IAAMhB,GAAG,cAAcoB,KAAK,OAAO3B,UAAQ,EAAvD,iCAKF,qCACE,cAACa,EAAA,EAAD,CACEY,QAAS,kBAAMxE,EAAWc,UAAU,cAAC,GAAD,MACpC4D,KAAK,OACL3B,UAAQ,EAHV,oBAMA,cAACa,EAAA,EAAD,CACEY,QAAS,kBAAMxE,EAAWc,UAAU,cAAC,GAAD,MACpC4D,KAAK,OACL3B,UAAQ,EAHV,kC,UC/BG,SAASgI,GAAT,GAA4E,IAAD,IAAhDhI,gBAAgD,aAA/BhC,eAA+B,MAArB,aAAqB,EACtF,OACI,cAACiK,GAAA,EAAD,CAAQjG,QAAQ,EAAMhC,SAAUA,EAAhC,SACI,cAAC8F,EAAA,EAAD,CAAQ9H,QAASA,M,cCAd,SAASkK,GAAWlC,GAAe,IAAD,EACzBC,aAASD,EAAMxI,MADU,mBACxC0I,EADwC,KACjCC,EADiC,KAE/C,OACE,eAACC,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACE,gCAAQgT,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKnT,MACpB,cAACmR,GAAA,EAAD,CAAOrD,OAAK,EAACC,MAAM,MAAnB,SACGoF,EAAKnT,QAEN,Q,cCVK,SAASmV,GAAcnC,GAAe,IAAD,EACnBC,aAASD,EAAMxI,MADI,mBAC3C0I,EAD2C,KACpCC,EADoC,KAC9BiC,EAD8B,KAElD,OACE,eAAChC,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACE,gCAAQgT,EAAMO,QACd,cAAC8B,GAAA,EAAD,CACEC,WAAS,EACTC,QAASvC,EAAMuC,QACfvQ,MAAOkO,EAAMlO,OAAS,KACtBkK,SAAU,SAACO,EAAG+F,GAAJ,OAAUJ,EAAQK,SAASD,EAAExQ,QACvC0Q,OAAQ,kBAAMN,EAAQO,YAAW,IACjC1B,YAAajB,EAAMiB,cAEpBd,EAAKG,SAAWH,EAAKnT,MACpB,cAACmR,GAAA,EAAD,CAAOrD,OAAK,EAACC,MAAM,MAAnB,SACGoF,EAAKnT,QAEN,QC3BH,IAAM4V,GAAkB,CAC3B,CAACtH,KAAM,SAAUtJ,MAAM,UACvB,CAACsJ,KAAM,UAAWtJ,MAAM,WACxB,CAACsJ,KAAM,OAAQtJ,MAAM,QACrB,CAACsJ,KAAM,OAAQtJ,MAAM,QACrB,CAACsJ,KAAM,QAAStJ,MAAM,SACtB,CAACsJ,KAAM,SAAUtJ,MAAM,UACvB,CAACsJ,KAAM,aAActJ,MAAM,e,qBCHhB,SAAS6Q,GAAY7C,GAAuC,IAAD,EACzCC,aAASD,EAAMxI,MAD0B,mBACjE0I,EADiE,KAC1DC,EAD0D,KACpDiC,EADoD,KAExE,OACE,eAAChC,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACE,cAAC,KAAD,uCACMkT,GACAF,GAFN,IAGE8C,SAAW5C,EAAMlO,OAAS,IAAIuB,KAAK2M,EAAMlO,QAAW,KACpDkK,SAAU,SAAClK,GAAD,OAAWoQ,EAAQK,SAASzQ,OAEvCmO,EAAKG,SAAWH,EAAKnT,MACpB,cAACmR,GAAA,EAAD,CAAOrD,OAAK,EAACC,MAAM,MAAnB,SACGoF,EAAKnT,QAEN,QCFK8M,oBAAS,WACtB,IAAMxM,EAAUyV,eACRrM,EAAkBkD,IAAlBlD,cAENjD,EAIEiD,EAJFjD,eACAG,EAGE8C,EAHF9C,eACAjB,EAEE+D,EAFF/D,aACAhB,EACE+E,EADF/E,eAGM9C,EAAOmU,eAAPnU,GAVsC,EAYdqQ,mBAC9B,IAAIxO,GAbwC,mBAYvC3B,EAZuC,KAY7BuD,EAZ6B,KAgBxCmP,EAAmBC,KAAW,CAClC9Q,MAAO8Q,OAAaC,SAAS,kCAC7B7Q,YAAa4Q,OAAaC,SAAS,wCACnC9Q,SAAU6Q,OAAaC,WACvB5Q,KAAM2Q,OAAaC,SAAS,qBAAqBsB,WACjDjS,KAAM0Q,OAAaC,WACnB1Q,MAAOyQ,OAAaC,aA0BtB,OAvBAtC,qBAAU,WACJxQ,GACF8D,EAAa9D,GAAIV,MAAK,SAACY,GAAD,OACpBuD,EAAY,IAAI5B,EAAmB3B,SAEtC,CAACF,EAAI8D,IAkBJhB,EAAuB,cAACqQ,GAAD,CAAkBhK,QAAQ,wBAGnD,eAACiG,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACE,cAACzC,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmB2G,KAAG,EAAC5D,MAAM,WAC7C,cAAC,KAAD,CACE0G,iBAAkBA,EAClByB,oBAAkB,EAClB1C,cAAezR,EACf4R,SAAU,SAAC3L,GAAD,OAzBhB,SAA0BjG,GACxB,GAAKA,EAASF,GASZ+E,EAAe7E,GAAUZ,MAAK,kBAC5Bb,EAAQC,KAAR,sBAA4BwB,EAASF,YAVvB,CAChB,IAAI8E,EAAW,2BACV5E,GADU,IAEbF,GAAIsU,iBAEN1P,EAAeE,GAAaxF,MAAK,kBAC/Bb,EAAQC,KAAR,sBAA4BoG,EAAY9E,SAkBlBuU,CAAiBpO,IAJzC,SAKG,gBAAG6L,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcc,EAA/B,EAA+BA,QAASC,EAAxC,EAAwCA,MAAxC,OACC,eAAC,KAAD,CAAMd,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACE,cAACjB,GAAD,CAAavI,KAAK,QAAQyJ,YAAY,UACtC,cAACiB,GAAD,CAAYmB,KAAM,EAAG7L,KAAK,cAAcyJ,YAAY,gBACpD,cAACkB,GAAD,CACEI,QAASK,GACTpL,KAAK,WACLyJ,YAAY,aAEd,cAAC4B,GAAD,CACErL,KAAK,OACL8L,gBAAgB,OAChBC,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEb,cAAC3H,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmB2G,KAAG,EAAC5D,MAAM,WAC7C,cAACgF,GAAD,CAAavI,KAAK,OAAOyJ,YAAY,SACrC,cAAClB,GAAD,CAAavI,KAAK,QAAQyJ,YAAY,UACtC,cAACpG,EAAA,EAAD,CACEoE,SAAU6B,IAAiBe,IAAUD,EACrClQ,QAASoP,EACTtC,QAAQ,OACRkF,UAAQ,EACRxC,KAAK,SACLlJ,QAAQ,WAEV,cAAC6C,EAAA,EAAD,CACER,GAAIkB,IACJhB,GAAG,cACHiE,QAAQ,QACR0C,KAAK,SACLlJ,QAAQ,SACR+C,MAAM,oB,oBC/FLjB,gBAAS,YAAsD,IAAtBxB,EAAqB,EAArBA,WAC9CJ,EAAiB0B,IAAjB1B,aAUR,OARAmH,qBAAU,WAIR,OAHI/G,GACFJ,EAAaG,oBAAoBC,GAE5B,WACLJ,EAAaqB,mBAEd,CAACrB,EAAcI,IAEhB,qCACE,cAAC2F,EAAA,EAAD,CACEG,UAAU,SACVrC,SAAS,MACT/B,UAAQ,EACRe,MAAM,QACNJ,MAAO,CAAEgJ,OAAQ,QALnB,SAME,cAAC7H,EAAA,EAAD,sCAEF,eAACmC,EAAA,EAAD,CAASlC,UAAQ,EAACwC,UAAQ,EAA1B,UACE,cAAC,KAAD,CACEoC,SAAU,SAAC3L,EAAD,OAAW4O,EAAX,EAAWA,UAAX,OACR1L,EAAasB,WAAWxE,GAAQ7G,MAAK,kBAAMyV,QAE7CpD,cAAe,CAAEpS,KAAM,IACvBqT,iBAAkBC,KAAW,CAC3BtT,KAAMsT,OAAaC,aANvB,SAQG,gBAAGb,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASf,EAA1B,EAA0BA,aAA1B,OACC,cAAC,KAAD,CAAME,UAAU,UAAhB,SACE,cAAC,KAAD,CAAOvJ,KAAK,OAAZ,SACG,SAACwI,GAAD,OACC,sBAAKrF,MAAO,CAAEK,SAAU,YAAxB,UACE,cAAC8E,EAAA,EAAD,CAAQ9D,OAAQ8E,IAChB,kDACEG,YAAY,oEACZoC,KAAM,GACFrD,EAAME,OAHZ,IAIE2D,WAAY,SAACpH,GACG,UAAVA,EAAE/O,KAAmB+O,EAAEqH,UAGb,UAAVrH,EAAE/O,KAAoB+O,EAAEqH,WAC1BrH,EAAEC,iBACFkF,GAAWf,oBAU7B,cAACkD,GAAA,EAAQ7F,MAAT,UACGhG,EAAaC,SAASuF,KAAI,SAACxE,GAAD,OACzB,eAAC6K,GAAA,EAAD,WACE,cAACA,GAAA,EAAQC,OAAT,CAAgBvJ,IAAKvB,EAAQ9H,OAAS,qBACtC,eAAC2S,GAAA,EAAQ1H,QAAT,WACE,cAAC0H,GAAA,EAAQE,OAAT,CAAgB5J,GAAIkB,IAAMhB,GAAE,oBAAerB,EAAQ1J,UAAnD,SACG0J,EAAQ/H,cAEX,cAAC4S,GAAA,EAAQG,SAAT,UACE,gCAAMC,aAAoBjL,EAAQC,WAAlC,YAEF,cAAC4K,GAAA,EAAQK,KAAT,CAAczJ,MAAO,CAAE0J,WAAY,YAAnC,SACGnL,EAAQ9K,YAVD8K,EAAQrK,kBChE5ByV,GAAqB,CACzBtQ,OAAQ,mBAGJuQ,GAAyB,CAC7BvJ,SAAU,WACVwJ,OAAQ,KACRC,KAAM,KACN7I,MAAO,OACP8I,OAAQ,OACR3J,MAAO,SAOMjB,gBAAS,YAAsD,IAAD,IAAnB/K,EAAmB,EAAnBA,SAAmB,EAGvE6K,IADFlD,cAAiB3C,EAFwD,EAExDA,iBAAkBrC,EAFsC,EAEtCA,QAASuC,EAF6B,EAE7BA,qBAE9C,OACE,eAACgK,EAAA,EAAQC,MAAT,WACE,eAACD,EAAA,EAAD,CAASnD,OAAK,EAACiB,SAAS,MAAMpB,MAAO,CAAEgK,QAAS,KAAhD,UACG5V,EAASmF,aACR,cAACiK,GAAA,EAAD,CACExD,MAAO,CAAEK,SAAU,WAAY4J,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAC7DC,QAAM,EACN/J,MAAM,MACN/C,QAAQ,cAGZ,cAACiD,EAAA,EAAD,CACER,IAAG,iCAA4B1L,EAAS8B,SAArC,QACH0L,OAAK,EACL5B,MAAO2J,KAET,cAACrG,EAAA,EAAD,CAAStD,MAAO4J,GAAwBzJ,OAAK,EAA7C,SACE,cAACX,GAAA,EAAK+D,MAAN,UACE,cAAC/D,GAAA,EAAD,UACE,eAACA,GAAA,EAAKkC,QAAN,WACE,cAACP,EAAA,EAAD,CACEH,KAAK,OACL3D,QAASjJ,EAAS6B,MAClB+J,MAAO,CAAEI,MAAO,WAElB,4BAAIvF,kBAAOzG,EAASgC,KAAO,iBAC3B,0CACY,IACV,iCACE,cAAC,IAAD,CAAMwJ,GAAE,8BAAexL,EAASqE,YAAxB,aAAe,EAAe5D,UAAtC,mBACGT,EAASqE,YADZ,aACG,EAAe5D,4BAShC,cAACyO,EAAA,EAAD,CAASM,UAAQ,EAACxC,SAAS,SAA3B,SACGhN,EAASmE,OACR,qCACE,cAAC2H,EAAA,EAAD,CACEE,MAAOhM,EAASmF,YAAc,QAAU,MACxCsK,QAAQ,OACR1D,OAAK,EACL9C,QACEjJ,EAASmF,YACL,uBACA,kBAENuH,QAASxH,EACTvC,QAASA,IAEX,cAACmJ,EAAA,EAAD,CACEoE,SAAUlQ,EAASmF,YACnBmG,GAAIkB,IACJhB,GAAE,kBAAaxL,EAASF,IACxBkM,MAAM,SACNyD,QAAQ,QALV,6BASAzP,EAASgE,QACX,cAAC8H,EAAA,EAAD,CAAQnJ,QAASA,EAAS+J,QAAS1H,EAAnC,+BAIA,cAAC8G,EAAA,EAAD,CACEoE,SAAUlQ,EAASmF,YACnBxC,QAASA,EACT+J,QAAS1H,EACTgH,MAAM,OAJR,mCCtFKjB,gBAAS,YAAoD,IAApB/K,EAAmB,EAAnBA,SACtD,OACE,eAACkP,EAAA,EAAQC,MAAT,WACE,cAACD,EAAA,EAAD,CAASlC,SAAS,MAAlB,SACE,eAACuD,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACE,cAACwB,GAAA,EAAD,CAAMzB,KAAK,QAAQZ,MAAM,OAAOvD,KAAK,WAEvC,cAAC8H,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACE,4BAAI7M,EAAS+B,qBAInB,cAACmN,EAAA,EAAD,CAASlC,UAAQ,EAAjB,SACE,eAACuD,EAAA,EAAD,CAAMyF,cAAc,SAApB,UACE,cAACzF,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACE,cAACwB,GAAA,EAAD,CAAM5F,KAAK,WAAWmE,KAAK,QAAQZ,MAAM,WAE3C,cAACuE,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACE,+BAAOpG,kBAAOzG,EAASgC,KAAO,gCAIpC,cAACkN,EAAA,EAAD,CAASlC,UAAQ,EAAjB,SACE,eAACuD,EAAA,EAAD,CAAMyF,cAAc,SAApB,UACE,cAACzF,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACE,cAACwB,GAAA,EAAD,CAAM5F,KAAK,SAASmE,KAAK,QAAQZ,MAAM,WAEzC,cAACuE,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACE,iCACG7M,EAASkC,MADZ,KACqBlC,EAASiC,qBC/B3B8I,gBAAS,YAEb,IAAD,IADR/K,SAAYiE,EACJ,EADIA,UAAWI,EACf,EADeA,KAEvB,OAAKJ,EAEH,qCACE,eAACiL,EAAA,EAAD,CACEG,UAAU,SACVzD,MAAO,CAAEgJ,OAAQ,QACjB5H,SAAS,MACTuC,WAAS,EACTtE,UAAQ,EACRe,MAAM,OANR,UAOG/H,EAAU+J,OAPb,IAO2C,IAArB/J,EAAU+J,OAAe,SAAW,SAP1D,YASA,cAACkB,EAAA,EAAD,CAASlC,UAAQ,EAAjB,SACE,cAACyB,GAAA,EAAD,CAAMwH,SAAO,EAACC,SAAO,EAArB,SACGjS,EAAU0K,KAAI,SAAChK,GAAD,OACb,eAACyG,GAAA,EAAD,CAAMQ,MAAO,CAAEK,SAAU,YAAzB,UACGtH,EAASlE,YAAT,OAAsB4D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM5D,WAC3B,cAAC2O,GAAA,EAAD,CACExD,MAAO,CAAEK,SAAU,YACnBD,MAAM,SACN+J,OAAO,QAHT,kBAOF,cAAC7J,EAAA,EAAD,CAAOU,KAAK,OAAOlB,IAAK/G,EAAStC,OAAS,qBAC1C,eAAC+I,GAAA,EAAKkC,QAAN,CAAc0I,cAAc,SAA5B,UACE,cAAC5K,GAAA,EAAK2B,OAAN,CAAazB,GAAG,KAAhB,SACE,cAAC,IAAD,CAAME,GAAE,oBAAe7G,EAASlE,UAAhC,SACGkE,EAASvC,gBAGbuC,EAASW,WACR,cAAC8F,GAAA,EAAK+K,MAAN,CAAYvK,MAAO,CAAEI,MAAO,UAA5B,4BAjBsCrH,EAASlE,oBAfxC,QCDVsK,gBAAS,WAA4B,IAC1CpD,EAAkBkD,IAAlBlD,cAEY3H,EAIhB2H,EAJFlF,iBACAmB,EAGE+D,EAHF/D,aACAhB,EAEE+E,EAFF/E,eACAwC,EACEuC,EADFvC,sBAEMtF,EAAOmU,eAAPnU,GAOR,OALAwQ,qBAAU,WAER,OADIxQ,GAAI8D,EAAa9D,GACd,kBAAMsF,OACZ,CAACtF,EAAI8D,EAAcwB,IAElBxC,IAAmB5C,EAAiB,cAACiT,GAAD,IAGtC,eAAC1C,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,UACE,cAAC,GAAD,CAAwB7M,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBuJ,WAAYvJ,EAASF,QAE7C,cAACyQ,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACE,cAACuJ,GAAD,CAAyBpW,SAAUA,YCjC5B,SAASqW,KACtB,OACE,eAACnH,EAAA,EAAD,CAASgD,aAAW,EAApB,UACE,eAACnF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACE,cAAC4B,GAAA,EAAD,CAAM5F,KAAK,WADb,6DAIA,cAACyG,EAAA,EAAQoH,OAAT,UACE,cAACxK,EAAA,EAAD,CAAQR,GAAIkB,IAAMhB,GAAG,cAAc6G,SAAO,EAA1C,4CCPOtH,oBAAS,WAAwB,IAAD,IACrCrN,EAAgBmN,IAAhBnN,YACR,OACE,eAACyN,EAAA,EAAD,WACE,cAAC4B,EAAA,EAAD,CAAQzB,GAAG,KAAKrC,QAAQ,iBACxB,cAAC8D,EAAA,EAAD,CAAQ6C,KAAG,EAACtE,GAAG,KAAKU,MAAM,MAAM/C,QAAO,UAAEvL,EAAYO,aAAd,aAAE,EAAmBsY,WAC3D,UAAA7Y,EAAYO,aAAZ,eAAmB4B,UAClB,eAACqP,EAAA,EAAD,WACE,cAACnC,EAAA,EAAD,CAAQzB,GAAG,KAAKrC,QAAQ,cAAc+C,MAAM,SAC5C,sBAAMJ,MAAO,CAAEkB,UAAW,QAA1B,SAAqCpP,EAAYO,MAAM4B,mB,UCRlDkL,gBAAS,WAA2B,IACzC7C,EAAe2C,IAAf3C,WAER,OACE,cAACsO,GAAA,EAAD,CACEzN,KAAMb,EAAWY,MAAMC,KACvB0N,QAASvO,EAAWC,WACpByE,KAAK,OAHP,SAIE,cAAC4J,GAAA,EAAMlJ,QAAP,UAAgBpF,EAAWY,MAAMzJ,Y,UCDxB0L,gBAAS,YAAkD,IAAvB2L,EAAsB,EAAtBA,YAAsB,EAGnE7L,IADF3B,aAAgBhI,EAFqD,EAErDA,QAASD,EAF4C,EAE5CA,cAE3B,OACE,cAAC,KAAD,CACEwQ,cAAe,CAAErP,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAa+L,IAAG,OAAEjN,QAAF,IAAEA,OAAF,EAAEA,EAASiN,KAClEyD,SAAU,SAAC3L,GACThF,EAAcgF,GAAQ7G,MAAK,WACzBsX,GAAY,OAGhBhE,iBAAkBC,KAAW,CAC3BvQ,YAAauQ,OAAaC,aAR9B,SAUG,gBAAGb,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAA1B,OACC,eAAC,KAAD,CAAMd,UAAU,UAAhB,UACE,cAAChB,GAAD,CAAakB,YAAY,eAAezJ,KAAK,gBAC7C,cAAC0K,GAAD,CAAYmB,KAAM,EAAGpC,YAAY,eAAezJ,KAAK,QACrD,cAACqD,EAAA,EAAD,CACE6I,UAAQ,EACRxC,KAAK,SACLxP,QAASoP,EACT9I,QAAQ,iBACRwG,QAAQ,QACRS,UAAW2C,IAAYC,aC/BpB/H,gBAAS,WAAyB,IACvC7B,EAAiB2B,IAAjB3B,aACAyN,EAA2BzN,EAA3ByN,cAAezV,EAAYgI,EAAZhI,QAFuB,EAGdiP,oBAAS,GAHK,mBAGvCzN,EAHuC,KAG7BgU,EAH6B,KAK9C,OACE,cAACE,GAAA,EAAIC,KAAL,UACE,eAACtG,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAM,KAAnB,UACE,cAACE,EAAA,EAAD,CACE0C,QAAQ,OACRhD,KAAK,OACLxD,QAAO,uBAAW/H,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAE5BuU,GACC,cAAC7K,EAAA,EAAD,CACE2D,QAAQ,QACR1D,OAAK,EACL9C,QAASvG,EAAW,SAAW,eAC/BgK,QAAS,kBAAMgK,GAAahU,SAIlC,cAAC6N,EAAA,EAAKC,OAAN,CAAa3D,MAAM,KAAnB,SACGnK,EACC,cAAC,GAAD,CAAiBgU,YAAaA,IAE9B,sBAAM9K,MAAO,CAAE0J,WAAY,YAA3B,gBAA0CpU,QAA1C,IAA0CA,OAA1C,EAA0CA,EAASiN,gBCzBzD2I,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAErY,IAAK,WAC1C,CAAEoY,SAAU,cAAeC,KAAM,CAAErY,IAAK,SACxC,CAAEoY,SAAU,UAAWC,KAAM,CAAErY,IAAK,aAGzBoM,gBAAS,WAA8B,IAC1C7B,EAAiB2B,IAAjB3B,aAEJpB,EAIAoB,EAJApB,mBACA5G,EAGAgI,EAHAhI,QACA+F,EAEAiC,EAFAjC,kBACAD,EACAkC,EADAlC,eAGJsJ,qBAAU,WACNxI,EAAmB5G,EAAST,YAC7B,CAACqH,EAAoB5G,IAMxB,OACI,cAAC0V,GAAA,EAAIC,KAAL,CAAUlU,QAASsE,EAAnB,SACI,eAACsJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQ0C,QAAQ,OAAOhD,KAAK,WAAWxD,QAAS,iBAEpD,eAACsH,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,UACI,cAAC+J,GAAA,EAAD,CACIE,MAAOA,GACPG,KAAM,CAAE1H,WAAW,EAAMjD,UAAU,GACnC4K,YAAa,SAACxJ,EAAGhR,GAAJ,OAdT,SAACgR,EAAmBhR,GACxCoL,EAAmB5G,EAAST,SAAUqW,GAAMpa,EAAKya,aAAuBH,KAAKrY,KAanCyY,CAAgB1J,EAAGhR,MAEjD,uBACA,cAACmR,GAAA,EAAKsB,MAAN,CAAYkI,YAAa,EAAzB,SACKrQ,EAAe2H,KAAI,SAAC3O,GAAD,OAChB,eAAC6N,GAAA,EAAD,CACIvC,GAAIkB,IACJhB,GAAE,sBAAiBxL,EAASF,IAFhC,UAKI,cAACoM,EAAA,EAAD,CACIR,IAAG,iCAA4B1L,EAAS8B,SAArC,QACH8J,MAAO,CAAEmE,UAAW,IAAKuH,UAAW,WAExC,eAACzJ,GAAA,EAAKP,QAAN,WACI,cAACO,GAAA,EAAKd,OAAN,CAAasC,UAAU,SAAvB,SAAiCrP,EAAS6B,QAC1C,eAACgM,GAAA,EAAK0J,KAAN,CAAWlI,UAAU,SAArB,UACI,8BAAM5I,kBAAO,IAAIjC,KAAKxE,EAASgC,MAAO,YACtC,8BAAMyE,kBAAO,IAAIjC,KAAKxE,EAASgC,MAAO,oBAVzChC,EAASF,oBC5C/BiL,gBAAS,WAA6B,IAC3C7B,EAAiB2B,IAAjB3B,aACAhI,EAAuDgI,EAAvDhI,QAAS2F,EAA8CqC,EAA9CrC,WAAYC,EAAkCoC,EAAlCpC,kBAAmBC,EAAemC,EAAfnC,UAEhD,OACE,cAAC6P,GAAA,EAAIC,KAAL,CAAUlU,QAASmE,EAAnB,SACE,eAACyJ,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACE,cAACE,EAAA,EAAD,CACE0C,QAAQ,OACRhD,KAAK,OACLxD,QAAuB,IAAdlC,EAAA,kCAAsC7F,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBACGlB,QADH,IACGA,OADH,EACGA,EAASkB,YADZ,qBAKb,cAACmO,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACG,cAACgB,GAAA,EAAKsB,MAAN,CAAYkI,YAAa,EAAzB,SAEKxQ,EAAW8H,KAAI,SAAAzN,GAAO,OACpB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yB,iBCjB7B,SAAS+W,GAAT,GAGJ,IAFTC,EAEQ,EAFRA,aACAC,EACQ,EADRA,WAEA,OACE,cAAC,KAAD,CACEhM,IAAK+L,EACL7L,MAAO,CAAE+J,OAAQ,IAAK9I,MAAO,QAC7B8K,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAACC,GAAD,OAAaT,EAAWS,M,cCf9B,SAASC,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACtCC,EAAW,CACf1D,OAAQ,kBACRrG,YAAa,OACbgK,aAAc,MACdC,WAAY,OACZnJ,UAAW,SACXsG,OAAQ,KAOJ8C,EAASC,uBACb,SAACC,GACCN,EACEM,EAAchK,KAAI,SAAChO,GAAD,OAChBc,OAAOC,OAAOf,EAAM,CAClBkX,QAASe,IAAIC,gBAAgBlY,WAKrC,CAAC0X,IAxB4D,EA0BTS,aAAY,CAAEL,WAA5DM,EA1BuD,EA0BvDA,aAAcC,EA1ByC,EA0BzCA,cAAeC,EA1B0B,EA0B1BA,aAErC,OACE,gDACMF,KADN,IAEEnN,MAAOqN,EAAY,2BAAQX,GArBd,CACf/J,YAAa,UAoB0C+J,EAFvD,UAGE,qCAAWU,MACX,cAAC3K,GAAA,EAAD,CAAM5F,KAAK,SAASmE,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ9D,QAAQ,wBChCP,SAASiQ,GAAT,GAA6D,IAAhCxY,EAA+B,EAA/BA,YAAaiC,EAAkB,EAAlBA,QAAkB,EAC/CwN,mBAAc,IADiC,mBAClEgJ,EADkE,KAC3Dd,EAD2D,OAE3ClI,qBAF2C,mBAElEgI,EAFkE,KAEzDT,EAFyD,KAgBzE,OANApH,qBAAU,WACR,OAAO,WACL6I,EAAMhW,SAAQ,SAACxC,GAAD,OAAeiY,IAAIQ,gBAAgBzY,EAAKkX,eAEvD,CAACsB,IAGF,eAAC5I,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACE,cAACE,EAAA,EAAD,CAAQ6C,KAAG,EAAC5D,MAAM,OAAO/C,QAAQ,uBACjC,cAACmP,GAAD,CAAqBC,SAAUA,OAEjC,cAAC9H,EAAA,EAAKC,OAAN,CAAa3D,MAAO,IACpB,eAAC0D,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACE,cAACE,EAAA,EAAD,CAAQ6C,KAAG,EAAC5D,MAAM,OAAO/C,QAAQ,0BAChCkQ,GAASA,EAAMnL,OAAS,GACvB,cAACwJ,GAAD,CACEE,WAAYA,EACZD,aAAc0B,EAAM,GAAGtB,aAI7B,cAACtH,EAAA,EAAKC,OAAN,CAAa3D,MAAO,IACpB,eAAC0D,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACE,cAACE,EAAA,EAAD,CAAQ6C,KAAG,EAAC5D,MAAM,OAAO/C,QAAQ,8BAChCkQ,GAASA,EAAMnL,OAAS,GACvB,qCACE,qBACEgE,UAAU,cACVpG,MAAO,CAAEmE,UAAW,IAAKsJ,SAAU,YAErC,eAACvN,EAAA,EAAOqD,MAAR,CAAcmK,OAAQ,EAAtB,UACE,cAACxN,EAAA,EAAD,CACEnJ,QAASA,EACT+J,QAxCd,WACMyL,GACFA,EAAQoB,mBAAmBC,QAAO,SAACC,GAAD,OAAU/Y,EAAY+Y,OAuC9C9E,UAAQ,EACRlI,KAAK,UAEP,cAACX,EAAA,EAAD,CACEoE,SAAUvN,EACV+J,QAAS,kBAAM2L,EAAS,KACxB5L,KAAK,sBClDN1B,oBAAS,YAA4C,IAAD,EAAlB7J,EAAkB,EAAlBA,QAAkB,EAU7D2J,IARF3B,aACEyN,EAH6D,EAG7DA,cACAjW,EAJ6D,EAI7DA,YACAkG,EAL6D,EAK7DA,UACAjE,EAN6D,EAM7DA,QACA5B,EAP6D,EAO7DA,aACA0G,EAR6D,EAQ7DA,YAR6D,EAYzB0I,oBAAS,GAZgB,mBAY1DuJ,EAZ0D,KAY5CC,EAZ4C,OAarCxJ,mBAAS,IAb4B,mBAa1DyJ,EAb0D,KAalDC,EAbkD,KAgCjE,OACE,cAACjD,GAAA,EAAIC,KAAL,UACE,eAACtG,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,UACE,cAACE,EAAA,EAAD,CAAQ0C,QAAQ,OAAOhD,KAAK,QAAQxD,QAAQ,WAC3C0N,GACC,cAAC7K,EAAA,EAAD,CACE2D,QAAQ,QACR1D,OAAK,EACL9C,QAASyQ,EAAe,SAAW,YACnChN,QAAS,kBAAMiN,GAAiBD,SAItC,cAACnJ,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACG6M,EACC,cAACR,GAAD,CACExY,YAlCZ,SAA2BC,GACzBD,EAAYC,GAAMvB,MAAK,kBAAMua,GAAgB,OAkCnChX,QAASiE,IAGX,cAACiH,GAAA,EAAKsB,MAAN,CAAYkI,YAAY,IAAxB,mBACGnW,EAAQmG,cADX,aACG,EAAgBsH,KAAI,SAACvH,GAAD,OACnB,eAACyG,GAAA,EAAD,WACE,cAAC3B,EAAA,EAAD,CAAOR,IAAKtE,EAAMlI,MACjByX,GACC,eAAC7K,EAAA,EAAOqD,MAAR,CAAc3B,OAAK,EAAC8L,OAAQ,EAA5B,UACE,cAACxN,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,OACN/C,QAAQ,OACRR,KAAM,OAASrB,EAAMtH,GACrBoQ,SAAU9I,EAAME,OAChB3E,QAASiX,IAAW,OAASxS,EAAMtH,IAAM6C,EACzC+J,QAAS,SAACgB,GAAD,OAhD/B,SACEtG,EACAsG,GAEAmM,EAAUnM,EAAEoM,cAAcrR,MAC1B1H,EAAaqG,GA2CuB2S,CAAmB3S,EAAOsG,MAE5C,cAAC5B,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,MACNS,KAAK,QACL9J,QAASiX,IAAWxS,EAAMtH,IAAM6C,EAChC+J,QAAS,SAACgB,GAAD,OAhD/B,SACEtG,EACAsG,GAEAmM,EAAUnM,EAAEoM,cAAcrR,MAC1BhB,EAAYL,GA2CwB4S,CAAkB5S,EAAOsG,IACzCwC,SAAU9I,EAAME,OAChBmB,KAAMrB,EAAMtH,UApBTsH,EAAMtH,mBCrDlBiL,gBAAS,YAA6C,IAAnB7J,EAAkB,EAAlBA,QAEzCgI,EAAgB2B,IAAhB3B,aAED4N,EAAQ,CACZ,CAAEC,SAAU,QAAS3E,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAAE2E,SAAU,SAAU3E,OAAQ,kBAAM,cAAC,GAAD,CAAelR,QAASA,MAC5D,CAAE6V,SAAU,SAAU3E,OAAQ,kBAAM,cAAC,GAAD,MACpC,CACE2E,SAAU,YACV3E,OAAQ,kBAAM,cAAC6H,GAAD,MAEhB,CACElD,SAAU,YACV3E,OAAQ,kBAAM,cAAC6H,GAAD,OAIlB,OACE,cAACrD,GAAA,EAAD,CACEK,KAAM,CAAEzJ,OAAO,EAAMb,UAAU,GAC/BuN,aAAa,QACbpD,MAAOA,EACPI,YAAa,SAACxJ,EAAGhR,GAAJ,OAAawM,EAAahC,aAAaxK,EAAKya,mB,oBCpBhDpM,gBAAS,YAA4C,IAAnB7J,EAAkB,EAAlBA,QAC/C,OACE,cAACgO,EAAA,EAAD,UACE,eAACqB,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACE,cAACzB,GAAA,EAAK+D,MAAN,UACE,eAAC/D,GAAA,EAAD,WACE,cAACA,GAAA,EAAKc,MAAN,CACEC,QAAM,EACNS,KAAK,QACLlB,IAAKxK,EAAQmB,OAAS,qBAExB,cAAC+I,GAAA,EAAKkC,QAAN,CAAc0I,cAAc,SAA5B,SACE,cAACjJ,EAAA,EAAD,CAAQzB,GAAG,KAAKrC,QAAS/H,EAAQkB,uBAKzC,eAACmO,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACE,eAACsN,GAAA,EAAUhL,MAAX,CAAiBmK,OAAQ,EAAzB,UACE,cAACa,GAAA,EAAD,CAAW3I,MAAM,YAAYvO,MAAO/B,EAAQqE,iBAC5C,cAAC4U,GAAA,EAAD,CAAW3I,MAAM,YAAYvO,MAAO/B,EAAQ0G,qBAE9C,cAACwS,GAAA,EAAD,IACA,cAAC,GAAD,CAAclZ,QAASA,eC/BlB6J,gBAAS,WAAwB,IACtCtK,EAAawT,eAAbxT,SACAyI,EAAiB2B,IAAjB3B,aAEAvC,EAAuDuC,EAAvDvC,eAAgBQ,EAAuC+B,EAAvC/B,YAAajG,EAA0BgI,EAA1BhI,QAASgG,EAAiBgC,EAAjBhC,aAS9C,OAPAoJ,qBAAU,WAER,OADAnJ,EAAY1G,GACN,WACJyG,EAAa,MAEd,CAACC,EAAa1G,EAASyG,IAEtBP,EAAuB,cAACsM,GAAD,CAAkBhK,QAAQ,uBAGnD,cAACsH,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACG3L,GACC,qCACE,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,UCvBtB,SAASmZ,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,8BACtDxH,EAAenI,IAA3B9G,UAAYiP,WACnB,OACI,cAAC,KAAD,2BACQwH,GADR,IAEIpI,OAAQ,SAACnB,GAAD,OAAW+B,EAAa,cAACsH,EAAD,eAAerJ,IAAY,cAAC,KAAD,CAAUzF,GAAG,UCyDrET,oBAhDf,WACE,IAAM0P,EAAWC,eADJ,EAEsB7P,IAA3BnN,EAFK,EAELA,YAAaqG,EAFR,EAEQA,UAUrB,OARAuM,qBAAU,WACJ5S,EAAYF,MACduG,EAAUyE,UAAUmS,SAAQ,kBAAMjd,EAAYkL,kBAE9ClL,EAAYkL,iBAEb,CAAClL,EAAaqG,IAEZrG,EAAYiL,UAIf,qCACE,cAAC,IAAD,CAAgBsD,SAAS,eAAe2O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOvP,OAAK,EAACwP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACNzI,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAACjH,EAAA,EAAD,CAAWS,MAAO,CAAEkB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAACuN,GAAD,CAAchP,OAAK,EAACwP,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAEEQ,KAAM,CAAC,kBAAmB,eAC1BN,UAAWU,IAFNR,EAAS9b,KAIhB,cAAC0b,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KAEpD,cAAC,KAAD,CAAOL,KAAK,gBAAgBN,UAAWY,KACvC,cAAC,KAAD,CAAON,KAAK,SAASN,UAAWa,KAChC,cAAC,KAAD,CAAOb,UAAWlE,mBAzBvB,cAACpD,GAAD,CAAkBhK,QAAQ,sBCpBtBoS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnc,MAAK,YAAkD,IAA/Coc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KAAe,IAC7BC,EAAapB,eAAboB,SAMR,OAJAxL,qBAAU,WACRjI,OAAO0T,SAAS,EAAG,KAClB,CAACD,IAEG,KCGF,IAAMvd,GAAUyd,eAEvBC,IAAS7J,OACP,cAACzH,EAAauR,SAAd,CAAuBjZ,MAAOxF,EAA9B,SACE,eAAC,KAAD,CAAQc,QAASA,GAAjB,UACE,cAACsd,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.51464deb.chunk.js","sourcesContent":["export interface Pagination{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n   \r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber;\r\n    pageSize;\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber\r\n        this.pageSize = pageSize\r\n    }\r\n}","import { Photo, Profile, UserActivity } from './../models/profile';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { history } from '../..'\r\nimport { Activity, ActivityFormValues } from '../models/activity'\r\nimport { User, UserFormValues } from '../models/user'\r\nimport { store } from '../stores/store'\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay)\r\n  })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\r\n\r\naxios.interceptors.request.use(config =>{\r\n  const token = store.commonStore.token;\r\n  if(token) config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n})\r\n\r\naxios.interceptors.response.use(\r\n  async (response) => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000)\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination){\r\n      response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n      return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response\r\n  },\r\n  (error: AxiosError) => {\r\n    const { data, status, config } = error.response!\r\n\r\n    switch (status) {      \r\n      case 400:\r\n        if(typeof data === 'string'){\r\n          toast.error(data)\r\n        }\r\n        if(config.method === 'get' && data.erros.hasOwnProperty('id')){\r\n          history.push('/not-found')\r\n        }\r\n        if (data.errors) {\r\n          const modalStateErors = []\r\n          for (const key in data.errors) {\r\n            if (data.errors[key]) {\r\n              modalStateErors.push(data.errors[key])\r\n            }\r\n          }\r\n          throw modalStateErors.flat()\r\n        } \r\n        break\r\n      case 401:\r\n        toast.error('unauthorized')\r\n        break\r\n      case 404:\r\n        history.push('not-found')\r\n        break\r\n      case 500:\r\n        store.commonStore.setServerError(data);\r\n        history.push('/server-error');\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nconst responseBody = <T,>(response: AxiosResponse<T>) => response.data\r\n\r\nconst requests = {\r\n  get: <T,>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T,>(url: string, body: {}) =>\r\n    axios.post<T>(url, body).then(responseBody),\r\n  put: <T,>(url: string, body: {}) =>\r\n    axios.put<T>(url, body).then(responseBody),\r\n  del: <T,>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n    .then(responseBody),\r\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n  create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n  update: (activity: ActivityFormValues) =>\r\n  requests.put<void>(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n  current: () => requests.get<User>('/account'),\r\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n  register: (user: UserFormValues) => requests.post<User>('/account/register',user)\r\n}\r\n\r\nconst Profiles = {\r\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n  uploadPhoto: (file: Blob) =>{\r\n    let formData = new FormData();\r\n    formData.append('File', file);\r\n    return axios.post<Photo>('photos', formData,{\r\n      headers: {'content-type': 'multipart/form-Data'}\r\n    });\r\n  },\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`,profile),\r\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n  listFollowings: (username:string, predicate: string) => \r\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n  listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n  Activities,\r\n  Account,\r\n  Profiles\r\n}\r\n\r\nexport default agent\r\n","import { Profile } from \"./profile\";\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date | null;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled:boolean;\r\n    isGoing: boolean;\r\n    isHost:boolean;\r\n    host?:Profile;\r\n    attendees: Profile[];\r\n  }\r\n\r\n  export class Activity implements Activity{\r\n    constructor(init?: ActivityFormValues){\r\n      Object.assign(this,init)\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues{\r\n    id? : string = undefined;\r\n    title: string ='';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n      if(activity){\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.venue = activity.venue;\r\n      }\r\n    }\r\n  }","import { User } from './user';\r\n\r\nexport interface Profile{\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?:string;\r\n    followersCount: number;\r\n    followingsCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\nexport interface Photo{\r\n    id: string;\r\n    url:string;\r\n    isMain: boolean;\r\n}\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from 'mobx'\r\nimport agent from '../api/agent'\r\nimport { Activity, ActivityFormValues } from '../models/activity'\r\nimport { format } from 'date-fns'\r\nimport { store } from './store'\r\nimport { Profile } from '../models/profile'\r\nimport { Pagination, PagingParams } from '../models/pagination'\r\n\r\nexport default class ActivityStore {\r\n  activityRegistry = new Map<string, Activity>()\r\n  selectedActivity: Activity | undefined = undefined\r\n  editMode = false\r\n  loading = false\r\n  loadingInitial = false\r\n  pagination: Pagination | null = null\r\n  pagingParams = new PagingParams()\r\n  predicate = new Map().set(\"all\", true)\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.pagingParams = new PagingParams() // reset the paging Parameters\r\n        this.activityRegistry.clear()\r\n        this.loadActivities() // load the next batch of activities\r\n      }\r\n    )\r\n  }\r\n\r\n  setPagingParams = (pagingParams: PagingParams) =>{\r\n    this.pagingParams = pagingParams;\r\n  }\r\n\r\n  setPredicate = (predicate: string, value: string | Date) =>{\r\n    const resetPredicate = () => {\r\n      this.predicate.forEach((value, key) => {\r\n          if (key !== 'startDate') this.predicate.delete(key);\r\n      })\r\n  }\r\n    switch (predicate) {\r\n      case 'all':\r\n      resetPredicate();\r\n      this.predicate.set('all', true);\r\n      break;\r\n      case 'isGoing':\r\n          resetPredicate();\r\n          this.predicate.set('isGoing', true);\r\n          break;\r\n      case 'isHost':\r\n          resetPredicate();\r\n          this.predicate.set('isHost', true);\r\n          break;\r\n      case 'startDate':\r\n          this.predicate.delete('startDate');\r\n          this.predicate.set('startDate', value);\r\n    }\r\n  }\r\n\r\n  get axiosParams(){\r\n    const params = new URLSearchParams();\r\n    params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n    params.append('pageSize', this.pagingParams.pageSize.toString());\r\n    this.predicate.forEach((value, key) => {\r\n      if(key === 'startDate'){\r\n          params.append(key, (value as Date).toISOString())\r\n      }else{\r\n        params.append(key, value);\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  get activitiesByDate() {\r\n    return Array.from(this.activityRegistry.values()).sort(\r\n      (a, b) => a.date!.getTime() - b.date!.getTime()\r\n    )\r\n  }\r\n\r\n  get groupedActivities() {\r\n    return Object.entries(\r\n      this.activitiesByDate.reduce((activities, activity) => {\r\n        // const date = activity.date!.toISOString().split('T')[0]\r\n        const date = format(activity.date!, 'dd MMM yyyy')\r\n        activities[date] = activities[date]\r\n          ? [...activities[date], activity]\r\n          : [activity]\r\n        return activities\r\n      }, {} as { [key: string]: Activity[] })\r\n    )\r\n  }\r\n\r\n  loadActivities = async () => {\r\n    this.loadingInitial = true\r\n    try {\r\n      const result = await agent.Activities.list(this.axiosParams)\r\n\r\n      result.data.forEach((activity) => {\r\n        this.setActivity(activity)\r\n      })\r\n      this.setPagination(result.pagination)\r\n      this.setLoadingInitial(false)\r\n    } catch (error) {\r\n      console.log(error)\r\n      this.setLoadingInitial(false)\r\n    }\r\n  }\r\n\r\n  setPagination = (pagination: Pagination) =>{\r\n    this.pagination = pagination;\r\n  }\r\n\r\n  loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id)\r\n    if (activity) {\r\n      this.selectedActivity = activity\r\n      return activity\r\n    } else {\r\n      this.loadingInitial = true\r\n      try {\r\n        activity = await agent.Activities.details(id)\r\n        this.setActivity(activity)\r\n        runInAction(() => {\r\n          this.selectedActivity = activity\r\n        })\r\n        this.setLoadingInitial(false)\r\n        return activity\r\n      } catch (error) {\r\n        console.log(error)\r\n        this.setLoadingInitial(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  private setActivity = (activity: Activity) => {\r\n    const user = store.userStore.user\r\n    if (user) {\r\n      activity.isGoing = activity.attendees?.some(\r\n        (a) => a.username === user.username\r\n      )\r\n      activity.isHost = activity.hostUsername === user.username\r\n      activity.host = activity.attendees?.find(\r\n        (x) => x.username === activity.hostUsername\r\n      )\r\n    }\r\n    activity.date = new Date(activity.date!)\r\n    this.activityRegistry.set(activity.id, activity) // mutate the state\r\n  }\r\n\r\n  private getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id)\r\n  }\r\n\r\n  setLoadingInitial = (state: boolean) => {\r\n    this.loadingInitial = state\r\n  }\r\n\r\n  createActivity = async (activity: ActivityFormValues) => {\r\n    const user = store.userStore.user\r\n    const attendee = new Profile(user!)\r\n    try {\r\n      await agent.Activities.create(activity)\r\n      const newActivity = new Activity(activity)\r\n      newActivity.hostUsername = user!.username\r\n      newActivity.attendees = [attendee]\r\n      this.setActivity(newActivity)\r\n      runInAction(() => {\r\n        this.selectedActivity = newActivity\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  updateActivity = async (activity: ActivityFormValues) => {\r\n    try {\r\n      await agent.Activities.update(activity)\r\n      runInAction(() => {\r\n        if (activity.id) {\r\n          let updatedActivity = {\r\n            ...this.getActivity(activity.id),\r\n            ...activity,\r\n          }\r\n          this.activityRegistry.set(activity.id, updatedActivity as Activity)\r\n          this.selectedActivity = updatedActivity as Activity\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => {\r\n        this.loading = false\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteActivity = async (id: string) => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Activities.delete(id)\r\n      runInAction(() => {\r\n        this.activityRegistry.delete(id)\r\n        this.loading = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => {\r\n        this.loading = false\r\n      })\r\n    }\r\n  }\r\n\r\n  updateAttendance = async () => {\r\n    const user = store.userStore.user\r\n    this.loading = true\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id)\r\n      runInAction(() => {\r\n        if (this.selectedActivity?.isGoing) {\r\n          this.selectedActivity.attendees =\r\n            this.selectedActivity.attendees?.filter(\r\n              (a) => a.username !== user?.username\r\n            )\r\n          this.selectedActivity.isGoing = false\r\n        } else {\r\n          const attendee = new Profile(user!)\r\n          this.selectedActivity?.attendees?.push(attendee)\r\n          this.selectedActivity!.isGoing = true\r\n        }\r\n\r\n        this.activityRegistry.set(\r\n          this.selectedActivity!.id,\r\n          this.selectedActivity!\r\n        )\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    } finally {\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  cancelActivityToggle = async () => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id)\r\n      runInAction(() => {\r\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\r\n        this.activityRegistry.set(\r\n          this.selectedActivity!.id,\r\n          this.selectedActivity!\r\n        )\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    } finally {\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  clearSelectedActivity = () => {\r\n    this.selectedActivity = undefined\r\n  }\r\n\r\n  updateAttendeeFollowing = (username: string) =>{\r\n    this.activityRegistry.forEach(activity =>{\r\n      activity.attendees.forEach(attendee => {\r\n        if(attendee.username === username){\r\n          attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n          attendee.following = !attendee.following\r\n        }\r\n      });\r\n    })\r\n  }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Photo, Profile, UserActivity } from './../models/profile';\r\nimport { store } from './store';\r\n\r\nexport default class ProfileStore{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;    \r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n                activeTab =>{\r\n                    if (activeTab === 3 || activeTab === 4) {\r\n                        const predicate = activeTab === 3 ? 'followers' : 'following'\r\n                        this.loadFollowings(predicate)\r\n                    }else{\r\n                        this.followings = []\r\n                    }\r\n                }\r\n            \r\n            )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) =>{\r\n        this.activeTab = activeTab\r\n    }\r\n\r\n    // eslint-disable-next-line getter-return\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n    }\r\n\r\n    loadProfile = async (username: string) =>{\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile\r\n                this.loadingProfile = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) =>{\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() =>{\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n    setMainPhoto = async (photo: Photo) =>{\r\n        this.loading = true\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    delelePhoto = async (photo: Photo) =>{\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id)\r\n            runInAction(() =>{\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateProfile = async(profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile)\r\n            runInAction(() =>{\r\n                if (profile.displayName && profile.displayName !==\r\n                store.userStore.user?.displayName) {\r\n                store.userStore.setDisplayName(profile.displayName);\r\n            }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) =>{\r\n        this.loading = true\r\n        try {\r\n            await agent.Profiles.updateFollowing(username)\r\n            store.activityStore.updateAttendeeFollowing(username)\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username \r\n                        && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--\r\n                    this.profile.following = !this.profile.following\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followingsCount++ : this.profile.followingsCount--\r\n                }\r\n                this.followings.forEach(profile =>{\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++\r\n                        profile.following = !profile.following\r\n                    }\r\n                })\r\n\r\n                this.loading = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate)\r\n            runInAction(() => {\r\n                this.followings = followings\r\n                this.loadingFollowings = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loadingFollowings = false)\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { UserFormValues } from './../models/user';\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { User } from \"../models/user\";\r\nimport agent from '../api/agent';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore{\r\n    user: User | null = null\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds)\r\n            store.commonStore.setToken(user.token)            \r\n            runInAction(() => this.user = user)\r\n            history.push('/activities')\r\n            store.modelStore.closeModal()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () =>{\r\n        store.commonStore.setToken(null)\r\n        window.localStorage.removeItem('token')\r\n        this.user = null\r\n        history.push('/') \r\n    }\r\n\r\n    getUser = async () =>{\r\n        try {\r\n            const user = await agent.Account.current()\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds)\r\n            store.commonStore.setToken(user.token)            \r\n            runInAction(() => this.user = user)\r\n            history.push('/activities')\r\n            store.modelStore.closeModal()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage =(image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { useContext, createContext } from 'react'\r\nimport ActivityStore from './activityStore'\r\nimport CommentStore from './commentStore'\r\nimport CommonStore from './commonStore'\r\nimport ModalStore from './modalStore'\r\nimport ProfileStore from './ProfileStore'\r\nimport UserStore from './userStore'\r\n\r\ninterface Store {\r\n  activityStore: ActivityStore\r\n  commonStore: CommonStore\r\n  userStore: UserStore\r\n  modelStore: ModalStore\r\n  profileStore: ProfileStore\r\n  commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n  activityStore: new ActivityStore(),\r\n  commonStore: new CommonStore(),\r\n  userStore: new UserStore(),\r\n  modelStore: new ModalStore(),\r\n  profileStore: new ProfileStore(),\r\n  commentStore: new CommentStore(),\r\n\r\n}\r\n\r\nexport const StoreContext = createContext(store)\r\n\r\nexport function useStore() {\r\n  return useContext(StoreContext)\r\n}\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('token'); // the window... tries to get the token from out localstorage\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        // this only react to when the token is changed.\r\n        // it does not run when store initially load\r\n        // it only runs when there is a change to the token\r\n        reaction(\r\n           () => this.token,\r\n            token =>{\r\n                if(token){\r\n                    window.localStorage.setItem('token', token)\r\n                }else{\r\n                    window.localStorage.removeItem('token')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) =>{\r\n        this.error = error;\r\n    }\r\n\r\n    setToken =(token: string | null) =>{\r\n        this.token = token\r\n    }\r\n\r\n    setAppLoaded =() =>{\r\n        this.appLoaded = true\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal{\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) =>{\r\n        this.modal.open = true;\r\n        this.modal.body = content\r\n    }\r\n\r\n    closeModal = () =>{\r\n        this.modal.open = false;\r\n        this.modal.body = null\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments: ChatComment[] = [];  \r\n    hubConnection: HubConnection | null = null;\r\n    \r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) =>{\r\n                runInAction(() => {\r\n                    comments.forEach(comment =>{\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z')\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) =>{\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt)\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error))\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) =>{\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store'\r\n\r\nexport default observer(function NavBar() {\r\n  const {\r\n    userStore: { user, logout },\r\n  } = useStore()\r\n  return (\r\n    <Menu inverted fixed='top'>\r\n      <Container>\r\n        <Menu.Item exact as={NavLink} to='/' header>\r\n          <img src='/assets/logo.png' alt='logo' style={{ marginRight: 10 }} />\r\n          GTC\r\n        </Menu.Item>\r\n        <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n        {/* <Menu.Item as={NavLink} to='/errors' name='Errors' /> */}\r\n        <Menu.Item>\r\n          <Button\r\n            as={NavLink}\r\n            to='/createActivity'\r\n            basic\r\n            inverted\r\n            color='black'\r\n            content='Create Activity'\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Item position='right'>\r\n          <Image\r\n            src={user?.image || '/assets/user.png'}\r\n            avatar\r\n            spaced='right'\r\n          />\r\n          <Dropdown pointing='top left' text={user?.displayName}>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item\r\n                as={Link}\r\n                to={`/profiles/${user?.username}`}\r\n                text='My profile'\r\n                icon='user'\r\n              />\r\n              <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n\r\n  const {activityStore: {predicate, setPredicate}} = useStore()\r\n  \r\n  return (\r\n    <>\r\n      <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n        <Header icon='filter' attached color='violet' content='Filters' />\r\n        <Menu.Item \r\n            content='All Activites' \r\n            active={predicate.has('all')}\r\n            onClick={() => setPredicate('all', 'true')}\r\n        />\r\n        <Menu.Item \r\n            content=\"I'm going\" \r\n            active={predicate.has('isGoing')}\r\n            onClick={() => setPredicate('isGoing', 'true')}\r\n        />\r\n        <Menu.Item \r\n            content=\"I'm hosting\" \r\n            active={predicate.has('isHost')}\r\n            onClick={() => setPredicate('isHost', 'true')}    \r\n        />\r\n    </Menu>\r\n    <Header />\r\n    <Calendar \r\n        onChange={(date) => setPredicate('startDate', date as Date)}\r\n        value={predicate.get('startDate') || new Date()}\r\n    />\r\n    </>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n  const { profileStore, userStore } = useStore()\r\n  const { updateFollowing, loading } = profileStore\r\n\r\n  if (userStore.user?.username === profile.username) return null\r\n\r\n  function handleFollow(e: SyntheticEvent, username: string) {\r\n    e.preventDefault()\r\n    profile.following\r\n      ? updateFollowing(username, false)\r\n      : updateFollowing(username, true)\r\n  }\r\n\r\n  return (\r\n    <Reveal animated='move'>\r\n      <Reveal.Content visible style={{ width: '100%' }}>\r\n        <Button\r\n          fluid\r\n          color='blue'\r\n          content={profile.following ? 'Following' : 'Not Following'}\r\n        />\r\n      </Reveal.Content>\r\n      <Reveal.Content hidden style={{ width: '100%' }}>\r\n        <Button\r\n          basic\r\n          fluid\r\n          color={profile.following ? 'red' : 'green'}\r\n          content={profile.following ? 'Unfollow' : 'Follow'}\r\n          loading={loading}\r\n          onClick={(e) => handleFollow(e, profile.username)}\r\n        />\r\n      </Reveal.Content>\r\n    </Reveal>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n  const truncate = (str: string | undefined) => {\r\n    if (str) {\r\n      return str.length > 40 ? str.substring(0, 37) + '...' : str\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card as={Link} to={`/profiles/${profile.username}`}>\r\n      <Image src={profile.image || '/assets/user.png'} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n        <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Icon name='user' />\r\n        {profile.followersCount} Followers\r\n      </Card.Content>\r\n      <FollowButton profile={profile} />\r\n    </Card>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n  attendees: Profile[]\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({\r\n  attendees,\r\n}: Props) {\r\n  const styles = {\r\n    borderColor: 'blue',\r\n    borderWidth: 3,\r\n  }\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map((attendee) => (\r\n        <Popup\r\n          hoverable\r\n          key={attendee.username}\r\n          trigger={\r\n            <List.Item\r\n              key={attendee.username}\r\n              as={Link}\r\n              to={`/profiles/${attendee.username}`}>\r\n              <Image\r\n                size='mini'\r\n                circular\r\n                src={attendee.image || '/assets/user.png'}\r\n                bordered\r\n                style={attendee.following ? styles : null}\r\n              />\r\n            </List.Item>\r\n          }>\r\n          <Popup.Content>\r\n            <ProfileCard profile={attendee} />\r\n          </Popup.Content>\r\n        </Popup>\r\n      ))}\r\n    </List>\r\n  )\r\n})\r\n","import { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { format } from 'date-fns'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        {activity.isCancelled && (\r\n          <Label\r\n            attached='top'\r\n            color='red'\r\n            content='Cancelled'\r\n            style={{ textAlign: 'center' }}\r\n          />\r\n        )}\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image\r\n              style={{ marginBotton: 5 }}\r\n              size='tiny'\r\n              circular\r\n              src={activity.host?.image || '/assets/user.png'}\r\n            />\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                {activity.title}\r\n              </Item.Header>\r\n              <Item.Description>\r\n                Hosted By{' '}\r\n                <Link to={`/profiles/${activity.hostUsername}`}>\r\n                  {activity.host?.displayName}\r\n                </Link>\r\n              </Item.Description>\r\n              {activity.isHost && (\r\n                <Item.Description>\r\n                  <Label basic color='purple'>\r\n                    You are hosting this Activity\r\n                  </Label>\r\n                </Item.Description>\r\n              )}\r\n              {activity.isGoing && !activity.isHost && (\r\n                <Item.Description>\r\n                  <Label basic color='green'>\r\n                    You are going to this Activity\r\n                  </Label>\r\n                </Item.Description>\r\n              )}\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n        <span>\r\n          <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n          <Icon name='marker' /> {activity.venue}\r\n        </span>\r\n      </Segment>\r\n      <Segment secondary>\r\n        <ActivityListItemAttendee attendees={activity.attendees!} />\r\n      </Segment>\r\n      <Segment clearing>\r\n        <span>{activity.description}</span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          color='facebook'\r\n          floated='right'\r\n          content='View'\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\nexport default observer(function ActivityList() {\r\n  const { activityStore } = useStore()\r\n\r\n  const { groupedActivities } = activityStore\r\n  return (\r\n    <>\r\n      {groupedActivities.map(([groupName, activities]) => (\r\n        <Fragment key={groupName}>\r\n          <Header sub color='violet'>\r\n            {groupName}\r\n          </Header>\r\n\r\n          {activities.map((activity) => (\r\n            <ActivityListItem key={activity.id} activity={activity} />\r\n          ))}\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  )\r\n})\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite'\r\nimport { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport { PagingParams } from '../../../app/models/pagination'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityFilters from './ActivityFilters'\r\nimport ActivityList from './ActivityList'\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder'\r\n\r\nexport default observer(function ActivityDashboard() {\r\n  const { activityStore } = useStore()\r\n  const { activityRegistry, loadActivities, setPagingParams, pagination } = activityStore\r\n  const [loadingNext, setLoadingNext] = useState(false)\r\n\r\n  function handleGetNext(){\r\n    setLoadingNext(true)\r\n    setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n    loadActivities().then(() => setLoadingNext(false))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activityRegistry.size <= 1) loadActivities()\r\n  }, [activityRegistry.size, loadActivities])\r\n\r\n  // if (activityStore.loadingInitial && !loadingNext)\r\n  //   return <LoadingComponent content='Loading activitivies...' />\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        {activityStore.loadingInitial && !loadingNext ? (\r\n          <>\r\n           <ActivityListItemPlaceholder/>\r\n           <ActivityListItemPlaceholder/>\r\n          </>\r\n        ): (\r\n          <InfiniteScroll\r\n              pageStart={0}\r\n              loadMore={handleGetNext}\r\n              hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n              initialLoad={false}\r\n              >\r\n            <ActivityList />\r\n        </InfiniteScroll>\r\n        )}             \r\n        \r\n        {/* <Button \r\n          floated='right'\r\n          content='Load More...'\r\n          primary\r\n          onClick={handleGetNext}\r\n          loading = {loadingNext}\r\n          disabled={pagination?.totalPages === pagination?.currentPage}\r\n        /> */}\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityFilters />\r\n      </Grid.Column>\r\n      <Grid.Column width={10}>\r\n        <Loader active={loadingNext}/>\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  placeholder: string\r\n  name: string\r\n  type?: string\r\n  label?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n  const [field, meta] = useField(props.name)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <input {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n  const { userStore } = useStore()\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) =>\r\n        userStore.login(values).catch((error) => {\r\n          setErrors({ error: 'Invalid email or password' })\r\n        })\r\n      }>\r\n      {({ handleSubmit, isSubmitting, errors }) => (\r\n        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n          <Header\r\n            as='h2'\r\n            content='Login to Goma Connect'\r\n            color='blue'\r\n            textAlign='center'\r\n          />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <ErrorMessage\r\n            name='error'\r\n            render={() => (\r\n              <Label\r\n                style={{ marginBotton: 10 }}\r\n                basic\r\n                color='red'\r\n                content={errors.error}\r\n              />\r\n            )}\r\n          />\r\n          <Button\r\n            loading={isSubmitting}\r\n            primary\r\n            content='Login'\r\n            type='submit'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  errors: any\r\n}\r\nexport default function ValidationErrors({ errors }: Props) {\r\n  return (\r\n    <Message error>\r\n      {errors && (\r\n        <Message.List>\r\n          {errors.map((err: any, i: any) => (\r\n            <Message.Item key={1}>{err}</Message.Item>\r\n          ))}\r\n        </Message.List>\r\n      )}\r\n    </Message>\r\n  )\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors'\r\n\r\nexport default observer(function RegisterForm() {\r\n  const { userStore } = useStore()\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        displayName: '',\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        error: null,\r\n      }}\r\n      onSubmit={(values, { setErrors }) =>\r\n        userStore.register(values).catch((error) => {\r\n          setErrors({ error })\r\n        })\r\n      }\r\n      validationSchema={Yup.object({\r\n        displayName: Yup.string().required(),\r\n        username: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required(),\r\n      })}>\r\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n        <Form\r\n          className='ui form error'\r\n          onSubmit={handleSubmit}\r\n          autoComplete='off'>\r\n          <Header\r\n            as='h2'\r\n            content='Sign up to Goma Connect'\r\n            color='blue'\r\n            textAlign='center'\r\n          />\r\n          <MyTextInput name='displayName' placeholder='Display Name' />\r\n          <MyTextInput name='username' placeholder='User Name' />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <ErrorMessage\r\n            name='error'\r\n            render={() => <ValidationErrors errors={errors.error} />}\r\n          />\r\n          <Button\r\n            disabled={!isValid || !dirty || isSubmitting}\r\n            loading={isSubmitting}\r\n            primary\r\n            content='Register'\r\n            type='submit'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport LoginForm from '../users/LoginForm'\r\nimport RegisterForm from '../users/RegisterForm'\r\n\r\nexport default observer(function HomePage() {\r\n  const { userStore, modelStore } = useStore()\r\n\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead'>\r\n      <Container text>\r\n        <Header as='h1' inverted>\r\n          <Image\r\n            size='massive'\r\n            src='/assets/logo.png'\r\n            alt='logo'\r\n            style={{ marginBottom: 12 }}\r\n          />\r\n          GTC\r\n        </Header>\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n            <Header as='h2' inverted content='Welcome to Goma Tech Connect' />\r\n            <Header as='h3' inverted content={`Let's skyrock together`} />\r\n            <Button as={Link} to='/activities' size='huge' inverted>\r\n              Go to Activities\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button\r\n              onClick={() => modelStore.openModal(<LoginForm />)}\r\n              size='huge'\r\n              inverted>\r\n              Login!\r\n            </Button>\r\n            <Button\r\n              onClick={() => modelStore.openModal(<RegisterForm />)}\r\n              size='huge'\r\n              inverted>\r\n              Register!\r\n            </Button>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  placeholder: string\r\n  name: string\r\n  rows: number\r\n  label?: string\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n  const [field, meta] = useField(props.name)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <textarea {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  placeholder: string\r\n  name: string\r\n  options: any\r\n  label?: string\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n  const [field, meta, helpers] = useField(props.name)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <Select\r\n        clearable\r\n        options={props.options}\r\n        value={field.value || null}\r\n        onChange={(e, d) => helpers.setValue(d.value)}\r\n        onBlur={() => helpers.setTouched(true)}\r\n        placeholder={props.placeholder}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n","\r\nexport const categoryOptions = [\r\n    {text: 'Drinks', value:'drinks'},\r\n    {text: 'Culture', value:'culture'},\r\n    {text: 'Film', value:'film'},\r\n    {text: 'Food', value:'food'},\r\n    {text: 'Music', value:'music'},\r\n    {text: 'Travel', value:'travel'},\r\n    {text: 'Technology', value:'technology'},\r\n]\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n  const [field, meta, helpers] = useField(props.name!)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <DatePicker\r\n        {...field}\r\n        {...props}\r\n        selected={(field.value && new Date(field.value)) || null}\r\n        onChange={(value) => helpers.setValue(value)}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router'\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../app/common/form/MyTextInput'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport MySelectInput from '../../../app/common/form/MySelectInput'\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\r\nimport MyDateInput from '../../../app/common/form/MyDateInput'\r\nimport { ActivityFormValues } from '../../../app/models/activity'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default observer(function ActivityForm() {\r\n  const history = useHistory()\r\n  const { activityStore } = useStore()\r\n  const {\r\n    createActivity,\r\n    updateActivity,\r\n    loadActivity,\r\n    loadingInitial,\r\n  } = activityStore\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [activity, setActivity] = useState<ActivityFormValues>(\r\n    new ActivityFormValues()\r\n  )\r\n\r\n  const validationSchema = Yup.object({\r\n    title: Yup.string().required('The activity title is required'),\r\n    description: Yup.string().required('The activity description is required'),\r\n    category: Yup.string().required(),\r\n    date: Yup.string().required('Date is required!').nullable(),\r\n    city: Yup.string().required(),\r\n    venue: Yup.string().required(),\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (id)\r\n      loadActivity(id).then((activity) =>\r\n        setActivity(new ActivityFormValues(activity))\r\n      )\r\n  }, [id, loadActivity])\r\n\r\n  function handleFormSubmit(activity: ActivityFormValues) {\r\n    if (!activity.id) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid(),\r\n      }\r\n      createActivity(newActivity).then(() =>\r\n        history.push(`/activities/${newActivity.id}`)\r\n      )\r\n    } else {\r\n      updateActivity(activity).then(() =>\r\n        history.push(`/activities/${activity.id}`)\r\n      )\r\n    }\r\n  }\r\n\r\n  if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Header content='Activity Details' sub color='purple' />\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        enableReinitialize\r\n        initialValues={activity}\r\n        onSubmit={(values) => handleFormSubmit(values)}>\r\n        {({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n          <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n            <MyTextInput name='title' placeholder='Title' />\r\n            <MyTextArea rows={5} name='description' placeholder='Description' />\r\n            <MySelectInput\r\n              options={categoryOptions}\r\n              name='category'\r\n              placeholder='Category'\r\n            />\r\n            <MyDateInput\r\n              name='date'\r\n              placeholderText='Date'\r\n              showTimeSelect\r\n              timeCaption='time'\r\n              dateFormat='MMMM d, yyyy h:mm aa'\r\n            />\r\n            <Header content='Location Details' sub color='purple' />\r\n            <MyTextInput name='city' placeholder='City' />\r\n            <MyTextInput name='venue' placeholder='Venue' />\r\n            <Button\r\n              disabled={isSubmitting || !dirty || !isValid}\r\n              loading={isSubmitting}\r\n              floated='left'\r\n              positive\r\n              type='submit'\r\n              content='Submit'\r\n            />\r\n            <Button\r\n              as={Link}\r\n              to='/activities'\r\n              floated='right'\r\n              type='button'\r\n              content='Cancel'\r\n              color='red'\r\n            />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Segment>\r\n  )\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n  activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n  const { commentStore } = useStore()\r\n\r\n  useEffect(() => {\r\n    if (activityId) {\r\n      commentStore.createHubConnection(activityId)\r\n    }\r\n    return () => {\r\n      commentStore.clearComments()\r\n    }\r\n  }, [commentStore, activityId])\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        color='black'\r\n        style={{ border: 'none' }}>\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached clearing>\r\n        <Formik\r\n          onSubmit={(values, { resetForm }) =>\r\n            commentStore.addComment(values).then(() => resetForm())\r\n          }\r\n          initialValues={{ body: '' }}\r\n          validationSchema={Yup.object({\r\n            body: Yup.string().required(),\r\n          })}>\r\n          {({ isSubmitting, isValid, handleSubmit }) => (\r\n            <Form className='ui form'>\r\n              <Field name='body'>\r\n                {(props: FieldProps) => (\r\n                  <div style={{ position: 'relative' }}>\r\n                    <Loader active={isSubmitting} />\r\n                    <textarea\r\n                      placeholder='Enter your comment(ENTER to submit, SHIFT + ENTER   for new line)'\r\n                      rows={2}\r\n                      {...props.field}\r\n                      onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && e.shiftKey) {\r\n                          return\r\n                        }\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                          e.preventDefault()\r\n                          isValid && handleSubmit()\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </Field>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <Comment.Group>\r\n          {commentStore.comments.map((comment) => (\r\n            <Comment key={comment.id}>\r\n              <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n              <Comment.Content>\r\n                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                  {comment.displayName}\r\n                </Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                </Comment.Metadata>\r\n                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>\r\n                  {comment.body}\r\n                </Comment.Text>\r\n              </Comment.Content>\r\n            </Comment>\r\n          ))}\r\n        </Comment.Group>\r\n      </Segment>\r\n    </>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { format } from 'date-fns'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)',\r\n}\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white',\r\n}\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n  const {\r\n    activityStore: { updateAttendance, loading, cancelActivityToggle },\r\n  } = useStore()\r\n  return (\r\n    <Segment.Group>\r\n      <Segment basic attached='top' style={{ padding: '0' }}>\r\n        {activity.isCancelled && (\r\n          <Label\r\n            style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n            ribbon\r\n            color='red'\r\n            content='Cancelled'\r\n          />\r\n        )}\r\n        <Image\r\n          src={`/assets/categoryImages/${activity.category}.jpg`}\r\n          fluid\r\n          style={activityImageStyle}\r\n        />\r\n        <Segment style={activityImageTextStyle} basic>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content>\r\n                <Header\r\n                  size='huge'\r\n                  content={activity.title}\r\n                  style={{ color: 'white' }}\r\n                />\r\n                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                <p>\r\n                  Hosted by{' '}\r\n                  <strong>\r\n                    <Link to={`/profiles/${activity.host?.username}`}>\r\n                      {activity.host?.username}\r\n                    </Link>\r\n                  </strong>\r\n                </p>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Segment>\r\n      <Segment clearing attached='bottom'>\r\n        {activity.isHost ? (\r\n          <>\r\n            <Button\r\n              color={activity.isCancelled ? 'green' : 'red'}\r\n              floated='left'\r\n              basic\r\n              content={\r\n                activity.isCancelled\r\n                  ? 'Re-Activate Activity'\r\n                  : 'Cancel Activity'\r\n              }\r\n              onClick={cancelActivityToggle}\r\n              loading={loading}\r\n            />\r\n            <Button\r\n              disabled={activity.isCancelled}\r\n              as={Link}\r\n              to={`/manage/${activity.id}`}\r\n              color='orange'\r\n              floated='right'>\r\n              Manage Event\r\n            </Button>\r\n          </>\r\n        ) : activity.isGoing ? (\r\n          <Button loading={loading} onClick={updateAttendance}>\r\n            Cancel attendance\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            disabled={activity.isCancelled}\r\n            loading={loading}\r\n            onClick={updateAttendance}\r\n            color='blue'>\r\n            Join Activity\r\n          </Button>\r\n        )}\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { format } from 'date-fns'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment attached='top'>\r\n        <Grid>\r\n          <Grid.Column width={1}>\r\n            <Icon size='large' color='teal' name='info' />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <p>{activity.description}</p>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign='middle'>\r\n          <Grid.Column width={1}>\r\n            <Icon name='calendar' size='large' color='teal' />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign='middle'>\r\n          <Grid.Column width={1}>\r\n            <Icon name='marker' size='large' color='teal' />\r\n          </Grid.Column>\r\n          <Grid.Column width={11}>\r\n            <span>\r\n              {activity.venue}, {activity.city}\r\n            </span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n})\r\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({\r\n  activity: { attendees, host },\r\n}: Props) {\r\n  if (!attendees) return null\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign='center'\r\n        style={{ border: 'none' }}\r\n        attached='top'\r\n        secondary\r\n        inverted\r\n        color='blue'>\r\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item style={{ position: 'relative' }} key={attendee.username}>\r\n              {attendee.username === host?.username && (\r\n                <Label\r\n                  style={{ position: 'absolute' }}\r\n                  color='orange'\r\n                  ribbon='right'>\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Item.Header as='h3'>\r\n                  <Link to={`/profiles/${attendee.username}`}>\r\n                    {attendee.displayName}\r\n                  </Link>\r\n                </Item.Header>\r\n                {attendee.following && (\r\n                  <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                )}\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n        </List>\r\n      </Segment>\r\n    </>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityDetailedChat from './ActivityDetailedChat'\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader'\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo'\r\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar'\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const { activityStore } = useStore()\r\n  const {\r\n    selectedActivity: activity,\r\n    loadActivity,\r\n    loadingInitial,\r\n    clearSelectedActivity,\r\n  } = activityStore\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id)\r\n    return () => clearSelectedActivity()\r\n  }, [id, loadActivity, clearSelectedActivity])\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity} />\r\n        <ActivityDetailedChat activityId={activity.id} />\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSideBar activity={activity} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})\r\n","import { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name='search' />\r\n        Oops - we've looked everywhere and could not find this.\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to='/activities' primary>\r\n          Return to activities page\r\n        </Button>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Container, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function ServerError() {\r\n  const { commonStore } = useStore()\r\n  return (\r\n    <Container>\r\n      <Header as='h1' content='Server Error' />\r\n      <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n      {commonStore.error?.details && (\r\n        <Segment>\r\n          <Header as='h4' content='Stack trace' color='teal' />\r\n          <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n        </Segment>\r\n      )}\r\n    </Container>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { useStore } from '../../stores/store'\r\n\r\nexport default observer(function ModalContainer() {\r\n  const { modelStore } = useStore()\r\n\r\n  return (\r\n    <Modal\r\n      open={modelStore.modal.open}\r\n      onClose={modelStore.closeModal}\r\n      size='mini'>\r\n      <Modal.Content>{modelStore.modal.body}</Modal.Content>\r\n    </Modal>\r\n  )\r\n})\r\n","import { Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Button } from 'semantic-ui-react'\r\nimport MyTextArea from '../../app/common/form/MyTextArea'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\n\r\ninterface Props {\r\n  setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n  const {\r\n    profileStore: { profile, updateProfile },\r\n  } = useStore()\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n      onSubmit={(values) => {\r\n        updateProfile(values).then(() => {\r\n          setEditMode(false)\r\n        })\r\n      }}\r\n      validationSchema={Yup.object({\r\n        displayName: Yup.string().required(),\r\n      })}>\r\n      {({ isSubmitting, isValid, dirty }) => (\r\n        <Form className='ui form'>\r\n          <MyTextInput placeholder='Display Name' name='displayName' />\r\n          <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n          <Button\r\n            positive\r\n            type='submit'\r\n            loading={isSubmitting}\r\n            content='Update profile'\r\n            floated='right'\r\n            disabled={!isValid || !dirty}\r\n          />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n})\r\n","import React, { useState } from 'react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport ProfileEditForm from './ProfileEditForm'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function ProfileAbout() {\r\n  const { profileStore } = useStore()\r\n  const { isCurrentUser, profile } = profileStore\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width='16'>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={`About ${profile?.displayName}`}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width='16'>\r\n          {editMode ? (\r\n            <ProfileEditForm setEditMode={setEditMode} />\r\n          ) : (\r\n            <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n})\r\n","import { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard'\r\n\r\nexport default observer(function ProfileFollowngs() {\r\n  const { profileStore } = useStore()\r\n  const { profile, followings, loadingFollowings, activeTab } =  profileStore\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingFollowings}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={activeTab === 3 ? `People following ${profile?.displayName}` : \r\n              `People ${profile?.displayName} is following`}\r\n          />\r\n        </Grid.Column>\r\n                            \r\n        <Grid.Column width={16}>\r\n           <Card.Group itemsPerRow={4}>\r\n              {         \r\n                followings.map(profile =>(\r\n                  <ProfileCard key={profile.username} profile={profile}/>\r\n                 ))  \r\n              }\r\n           </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>                       \r\n    </Tab.Pane>\r\n  )\r\n})\r\n","import { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n  imagePreview: string\r\n  setCropper: (cropper: Cropper) => void\r\n}\r\n\r\nexport default function PhotoWidgetCropper({\r\n  imagePreview,\r\n  setCropper,\r\n}: Props) {\r\n  return (\r\n    <Cropper\r\n      src={imagePreview}\r\n      style={{ height: 200, width: '100%' }}\r\n      initialAspectRatio={1}\r\n      aspectRatio={1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      autoCropArea={1}\r\n      background={false}\r\n      onInitialized={(cropper) => setCropper(cropper)}\r\n    />\r\n  )\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200,\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green',\r\n  }\r\n\r\n  const onDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      setFiles(\r\n        acceptedFiles.map((file: any) =>\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n          })\r\n        )\r\n      )\r\n    },\r\n    [setFiles]\r\n  )\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper'\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n  loading: boolean\r\n  uploadPhoto: (file: Blob) => void\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\r\n  const [files, setFiles] = useState<any>([])\r\n  const [cropper, setCropper] = useState<Cropper>()\r\n\r\n  function onCrop() {\r\n    if (cropper) {\r\n      cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n    }\r\n  }, [files])\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={4}>\r\n        <Header sub color='blue' content='Step 1 - Add Photo' />\r\n        <PhotoWidgetDropzone setFiles={setFiles} />\r\n      </Grid.Column>\r\n      <Grid.Column width={1} />\r\n      <Grid.Column width={4}>\r\n        <Header sub color='blue' content='Step 1 - Resize Image' />\r\n        {files && files.length > 0 && (\r\n          <PhotoWidgetCropper\r\n            setCropper={setCropper}\r\n            imagePreview={files[0].preview}\r\n          />\r\n        )}\r\n      </Grid.Column>\r\n      <Grid.Column width={1} />\r\n      <Grid.Column width={4}>\r\n        <Header sub color='blue' content='Step 1 - Preview & Upload' />\r\n        {files && files.length > 0 && (\r\n          <>\r\n            <div\r\n              className='img-preview'\r\n              style={{ minHeight: 200, overflow: 'hidden' }}\r\n            />\r\n            <Button.Group widths={2}>\r\n              <Button\r\n                loading={loading}\r\n                onClick={onCrop}\r\n                positive\r\n                icon='check'\r\n              />\r\n              <Button\r\n                disabled={loading}\r\n                onClick={() => setFiles([])}\r\n                icon='close'\r\n              />\r\n            </Button.Group>\r\n          </>\r\n        )}\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n  const {\r\n    profileStore: {\r\n      isCurrentUser,\r\n      uploadPhoto,\r\n      uploading,\r\n      loading,\r\n      setMainPhoto,\r\n      delelePhoto,\r\n    },\r\n  } = useStore()\r\n\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false)\r\n  const [target, setTarget] = useState('')\r\n\r\n  function handlePhotoUpload(file: Blob) {\r\n    uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n  }\r\n  function handleSetMainPhoto(\r\n    photo: Photo,\r\n    e: SyntheticEvent<HTMLButtonElement>\r\n  ) {\r\n    setTarget(e.currentTarget.name)\r\n    setMainPhoto(photo)\r\n  }\r\n  function handleDeletePhoto(\r\n    photo: Photo,\r\n    e: SyntheticEvent<HTMLButtonElement>\r\n  ) {\r\n    setTarget(e.currentTarget.name)\r\n    delelePhoto(photo)\r\n  }\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='image' content='Photos' />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget\r\n              uploadPhoto={handlePhotoUpload}\r\n              loading={uploading}\r\n            />\r\n          ) : (\r\n            <Card.Group itemsPerRow='5'>\r\n              {profile.photos?.map((photo) => (\r\n                <Card key={photo.id}>\r\n                  <Image src={photo.url} />\r\n                  {isCurrentUser && (\r\n                    <Button.Group fluid widths={2}>\r\n                      <Button\r\n                        basic\r\n                        color='blue'\r\n                        content='Main'\r\n                        name={'main' + photo.id}\r\n                        disabled={photo.isMain}\r\n                        loading={target === 'main' + photo.id && loading}\r\n                        onClick={(e) => handleSetMainPhoto(photo, e)}\r\n                      />\r\n                      <Button\r\n                        basic\r\n                        color='red'\r\n                        icon='trash'\r\n                        loading={target === photo.id && loading}\r\n                        onClick={(e) => handleDeletePhoto(photo, e)}\r\n                        disabled={photo.isMain}\r\n                        name={photo.id}\r\n                      />\r\n                    </Button.Group>\r\n                  )}\r\n                </Card>\r\n              ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n  \r\n  const {profileStore} = useStore()\r\n\r\n  const panes = [\r\n    { menuItem: 'About', render: () => <ProfileAbout /> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n    { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n    {\r\n      menuItem: 'Followers',\r\n      render: () => <ProfileFollowings/>,\r\n    },\r\n    {\r\n      menuItem: 'Following',\r\n      render: () => <ProfileFollowings/>,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition='right'\r\n      panes={panes}\r\n      onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n    />\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport {\r\n  Divider,\r\n  Grid,\r\n  Header,\r\n  Item,\r\n  Segment,\r\n  Statistic,\r\n} from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image\r\n                avatar\r\n                size='small'\r\n                src={profile.image || '/assets/user.png'}\r\n              />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1' content={profile.displayName} />\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label='Followers' value={profile.followersCount} />\r\n            <Statistic label='Following' value={profile.followingsCount} />\r\n          </Statistic.Group>\r\n          <Divider />\r\n          <FollowButton profile={profile} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nexport default observer(function ProfilePage() {\r\n  const { username } = useParams<{ username: string }>()\r\n  const { profileStore } = useStore()\r\n\r\n  const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore\r\n\r\n  useEffect(() => {\r\n    loadProfile(username)\r\n    return() =>{\r\n      setActiveTab(0)\r\n    }\r\n  }, [loadProfile, username,setActiveTab])\r\n\r\n  if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        {profile && (\r\n          <>\r\n            <ProfileHeader profile={profile} />\r\n            <ProfileContent profile={profile} />\r\n          </>\r\n        )}\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})\r\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { Container } from 'semantic-ui-react'\r\nimport NavBar from './NavBar'\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Route, Switch, useLocation } from 'react-router'\r\nimport HomePage from '../../features/home/HomePage'\r\nimport ActivityForm from '../../features/activities/form/ActivityForm'\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails'\r\n// import TestErrors from '../../features/errors/TestErors'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport NotFound from '../../features/errors/NotFound'\r\nimport ServerError from '../../features/errors/ServerError'\r\nimport LoginForm from '../../features/users/LoginForm'\r\nimport { useStore } from '../stores/store'\r\nimport LoadingComponent from './LoadingComponent'\r\nimport ModalContainer from '../common/modals/ModalContainer'\r\nimport ProfilePage from '../../features/profiles/ProfilePage'\r\nimport PrivateRoute from './PrivateRoute'\r\n\r\n\r\nfunction App() {\r\n  const location = useLocation()\r\n  const { commonStore, userStore } = useStore()\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\r\n    } else {\r\n      commonStore.setAppLoaded()\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded)\r\n    return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute\r\n                  key={location.key}\r\n                  path={['/createActivity', '/manage/:id']}\r\n                  component={ActivityForm}\r\n                />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                {/* <PrivateRoute path='/errors' component={TestErrors} /> */}\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route path='/login' component={LoginForm} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(App)\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import ReactDOM from 'react-dom'\r\nimport './app/layout/styles.css'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport App from './app/layout/App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { store, StoreContext } from './app/stores/store'\r\nimport { Router } from 'react-router-dom'\r\nimport {createBrowserHistory} from 'history'\r\nimport ScrollToTop from './app/layout/ScrollToTop'\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}